{
    "version": "https://jsonfeed.org/version/1",
    "title": "翼舞成梦",
    "subtitle": "翼舞成梦",
    "icon": "https://costalong.com/images/favicon.ico",
    "description": "",
    "home_page_url": "https://costalong.com",
    "items": [
        {
            "id": "https://costalong.com/2024/07/16/go/tests/gomock/",
            "url": "https://costalong.com/2024/07/16/go/tests/gomock/",
            "title": "Gomock进行单元测试",
            "date_published": "2024-07-16T15:10:12.000Z",
            "content_html": "<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>在 mockgen 命令中,支持两种生成模式：</p>\n<ol>\n<li>source：从源文件生成 mock 接口（通过 -source 启用）</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">mockgen -source=foo.go [other options]\n</code></pre>\n<ol start=\"2\">\n<li>reflect：通过使用反射程序来生成 mock 接口.它通过传递两个非标志参数来启用：导入路径和逗号分隔的接口列表</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">mockgen database/sql/driver Conn,Driver\n</code></pre>\n<p>两种方式生成的 mock 代码并没有什么区别.因此选择合适的就可以了</p>\n<h2 id=\"写测试用例\"><a href=\"#写测试用例\" class=\"headerlink\" title=\"写测试用例\"></a>写测试用例</h2><p><strong>1. 步骤:</strong></p>\n<ol>\n<li>想清楚整体逻辑</li>\n<li>定义想要（模拟）依赖项的 interface（接口）</li>\n<li>使用 mockgen 命令对所需 mock 的 interface 生成 mock 文件</li>\n<li>编写单元测试的逻辑,在测试中使用 mock</li>\n<li>进行单元测试的验证</li>\n</ol>\n<p><strong>2. 目录：</strong></p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\">├── mock\n├── person\n│   └── male.go\n└── user\n    ├── user.go\n    └── user_test.go\n</code></pre>\n<p><strong>2. 编写：</strong></p>\n<ol>\n<li><p>定义 interface </p>\n<p> 打开 person/male.go 文件,写入以下内容：</p>\n</li>\n</ol>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> person\n\n<span class=\"token keyword\">type</span> Male <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"2\">\n<li><p>调用方法</p>\n<p>打开 user/user.go 文件,写入以下内容</p>\n</li>\n</ol>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> user\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"github.com/EDDYCJY/mockd/person\"</span>\n\n<span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Person person<span class=\"token punctuation\">.</span>Male\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewUser</span><span class=\"token punctuation\">(</span>p person<span class=\"token punctuation\">.</span>Male<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>User <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>User<span class=\"token punctuation\">{</span>Person<span class=\"token punctuation\">:</span> p<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>u <span class=\"token operator\">*</span>User<span class=\"token punctuation\">)</span> <span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> u<span class=\"token punctuation\">.</span>Person<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"3\">\n<li>生成 mock 文件</li>\n</ol>\n<p>回到 mockd/ 的根目录下,执行以下命令</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">$ mockgen -source=./person/male.go -destination=./mock/male_mock.go -package=mock\n</code></pre>\n<p>在执行完毕后,可以发现 mock/ 目录下多出了 male_mock.go 文件,这就是 mock 文件.那么命令中的指令又分别有什么用呢？如下：</p>\n<pre><code>-source：设置需要模拟（mock）的接口文件\n\n-destination：设置 mock 文件输出的地方,若不设置则打印到标准输出中\n\n-package：设置 mock 文件的包名,若不设置则为 mock_ 前缀加上文件名（如本文的包名会为 mock_person）\n</code></pre>\n<p>想了解更多的指令符,可参见 官方文档: <a href=\"https://github.com/golang/mock#running-mockgen\">https://github.com/golang/mock#running-mockgen</a></p>\n<p><strong>输出的 mock 文件</strong></p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// Code generated by MockGen. DO NOT EDIT.</span>\n<span class=\"token comment\" spellcheck=\"true\">// Source: ./person/male.go</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Package mock is a generated GoMock package.</span>\n<span class=\"token keyword\">package</span> mock\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    gomock <span class=\"token string\">\"github.com/golang/mock/gomock\"</span>\n    reflect <span class=\"token string\">\"reflect\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// MockMale is a mock of Male interface</span>\n<span class=\"token keyword\">type</span> MockMale <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    ctrl     <span class=\"token operator\">*</span>gomock<span class=\"token punctuation\">.</span>Controller\n    recorder <span class=\"token operator\">*</span>MockMaleMockRecorder\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// MockMaleMockRecorder is the mock recorder for MockMale</span>\n<span class=\"token keyword\">type</span> MockMaleMockRecorder <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    mock <span class=\"token operator\">*</span>MockMale\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// NewMockMale creates a new mock instance</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewMockMale</span><span class=\"token punctuation\">(</span>ctrl <span class=\"token operator\">*</span>gomock<span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>MockMale <span class=\"token punctuation\">{</span>\n    mock <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>MockMale<span class=\"token punctuation\">{</span>ctrl<span class=\"token punctuation\">:</span> ctrl<span class=\"token punctuation\">}</span>\n    mock<span class=\"token punctuation\">.</span>recorder <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>MockMaleMockRecorder<span class=\"token punctuation\">{</span>mock<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> mock\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// EXPECT returns an object that allows the caller to indicate expected use</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>MockMale<span class=\"token punctuation\">)</span> <span class=\"token function\">EXPECT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>MockMaleMockRecorder <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span>recorder\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Get mocks base method</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>MockMale<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    ret <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>ctrl<span class=\"token punctuation\">.</span><span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Get\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n    ret0<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> ret<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ret0\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Get indicates an expected call of Get</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>mr <span class=\"token operator\">*</span>MockMaleMockRecorder<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>id <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>gomock<span class=\"token punctuation\">.</span>Call <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> mr<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">.</span>ctrl<span class=\"token punctuation\">.</span><span class=\"token function\">RecordCallWithMethodType</span><span class=\"token punctuation\">(</span>mr<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Get\"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>MockMale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>4. 测试用例</strong></p>\n<p>打开 user/user_test.go 文件,写入以下内容：</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> user\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"testing\"</span>\n\n    <span class=\"token string\">\"github.com/EDDYCJY/mockd/mock\"</span>\n\n    <span class=\"token string\">\"github.com/golang/mock/gomock\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestUser_GetUserInfo</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ctl <span class=\"token operator\">:=</span> gomock<span class=\"token punctuation\">.</span><span class=\"token function\">NewController</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">Finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> id <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    mockMale <span class=\"token operator\">:=</span> mock<span class=\"token punctuation\">.</span><span class=\"token function\">NewMockMale</span><span class=\"token punctuation\">(</span>ctl<span class=\"token punctuation\">)</span>\n    gomock<span class=\"token punctuation\">.</span><span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>\n        mockMale<span class=\"token punctuation\">.</span><span class=\"token function\">EXPECT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    user <span class=\"token operator\">:=</span> <span class=\"token function\">NewUser</span><span class=\"token punctuation\">(</span>mockMale<span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">:=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">GetUserInfo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.GetUserInfo err: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol>\n<li><p>gomock.NewController：返回 gomock.Controller,它代表 mock 生态系统中的顶级控件.定义了 mock 对象的范围,生命周期和期待值.另外它在多个 goroutine 中是安全的</p>\n</li>\n<li><p>mock.NewMockMale：创建一个新的 mock 实例</p>\n</li>\n<li><p>gomock.InOrder：声明给定的调用应按顺序进行（是对 gomock.After 的二次封装）</p>\n</li>\n<li><p>mockMale.EXPECT().Get(id).Return(nil)：这里有三个步骤,EXPECT()返回一个允许调用者设置期望和返回值的对象.Get(id) 是设置入参并调用 mock 实例中的方法.Return(nil) 是设置先前调用的方法出参.简单来说,就是设置入参并调用,最后设置返回值</p>\n</li>\n<li><p>NewUser(mockMale)：创建 User 实例,值得注意的是,在这里注入了 mock 对象,因此实际在随后的 user.GetUserInfo(id) 调用（入参：id 为 1）中.它调用的是我们事先模拟好的 mock 方法</p>\n</li>\n<li><p>ctl.Finish()：进行 mock 用例的期望值断言,一般会使用 defer 延迟执行,以防止我们忘记这一操作</p>\n</li>\n</ol>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>回到 mockd/ 的根目录下,执行以下命令</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">$ go test ./user\n</code></pre>\n<p>看到这样的结果,就大功告成啦！您可以自己调整一下 Return() 的返回值,以此得到不一样的测试结果哦 </p>\n<ol>\n<li>测试覆盖率</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">go test -cover ./user\n</code></pre>\n<p>可通过设置 -cover 标志符来开启覆盖率的统计,展示内容为 coverage: 100.0%.</p>\n<ol start=\"2\">\n<li>可视化界面</li>\n</ol>\n<p>生成测试覆盖率的 profile 文件</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">go test ./... -coverprofile=cover.out\n</code></pre>\n<p>利用 profile 文件生成可视化界面</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">go tool cover -html=cover.out\n</code></pre>\n<h2 id=\"常用-mock-方法\"><a href=\"#常用-mock-方法\" class=\"headerlink\" title=\"常用 mock 方法\"></a>常用 mock 方法</h2><ol>\n<li><p>调用方法<br> Call.Do()：声明在匹配时要运行的操作</p>\n<p> Call.DoAndReturn()：声明在匹配调用时要运行的操作,并且模拟返回该函数的返回值</p>\n<p> Call.MaxTimes()：设置最大的调用次数为 n 次</p>\n<p> Call.MinTimes()：设置最小的调用次数为 n 次</p>\n<p> Call.AnyTimes()：允许调用次数为 0 次或更多次</p>\n<p> Call.Times()：设置调用次数为 n 次</p>\n</li>\n<li><p>参数匹配</p>\n<p> gomock.Any()：匹配任意值</p>\n<p> gomock.Eq()：通过反射匹配到指定的类型值,而不需要手动设置<br> gomock.Nil()：返回 nil</p>\n</li>\n</ol>\n<h2 id=\"生成多个-mock-文件\"><a href=\"#生成多个-mock-文件\" class=\"headerlink\" title=\"生成多个 mock 文件\"></a>生成多个 mock 文件</h2><p> 可能会想一条条命令生成 mock 文件,岂不得崩溃？</p>\n<p>当然,官方提供了更方便的方式,我们可以利用 go:generate 来完成批量处理的功能</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">go generate [-run regexp] [-n] [-v] [-x] [build flags] [file.go... | packages]\n</code></pre>\n<ol>\n<li>修改 interface 方法</li>\n</ol>\n<p>打开 person/male.go 文件,修改为以下内容：</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> person\n\n<span class=\"token comment\" spellcheck=\"true\">//go:generate mockgen -destination=../mock/male_mock.go -package=mock github.com/EDDYCJY/mockd/person Male</span>\n\n<span class=\"token keyword\">type</span> Male <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>关注到 go:generate 这条语句,可分为以下部分：</p>\n<ol>\n<li>声明 //go:generate （注意不要留空格）</li>\n<li>使用 mockgen 命令</li>\n<li>定义 -destination</li>\n<li>定义 -package</li>\n<li>定义 source,此处为 person 的包路径</li>\n<li>定义 interfaces,此处为 Male</li>\n</ol>\n<p> <strong>注意:</strong> 上面注释中的mockgen命令因为在调用时其当前目录是person，所以在-destination参数中我们需要指定../mocks/作为mock生成代码的输出目录。</p>\n<p>有了上面的go:generate注释，我们要生成所有mock只需在项目的根目录下运行下面这条命令即可，是不是非常方便？</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">go generate ./...\n</code></pre>\n<p><strong>注意:</strong> 注释中的//和go:generate之间不能有空格，这样go generate才可以把注释当做一条命令来处理。</p>\n<p><strong>总结：</strong><br>在单元测试这一环,gomock 给我们提供了极大的便利.能够 mock 掉许许多多的依赖项,其中还有很多的使用方式和功能.您可以 mark 住后详细阅读下官方文档,记忆会更深刻 </p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "golang",
                "golang",
                "test"
            ]
        },
        {
            "id": "https://costalong.com/2024/07/16/go/package/semaphore/",
            "url": "https://costalong.com/2024/07/16/go/package/semaphore/",
            "title": "semaphore 信号量",
            "date_published": "2024-07-16T15:00:20.000Z",
            "content_html": "<p>源代码:  golang.org/x/sync/semaphore</p>\n<h1 id=\"semaphore-信号量\"><a href=\"#semaphore-信号量\" class=\"headerlink\" title=\"semaphore  信号量\"></a>semaphore  信号量</h1><p>源代码:  golang.org/x/sync/semaphore</p>\n<ol>\n<li>创建</li>\n</ol>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// NewWeighted使用给定的值创建一个新的加权信号量</span>\n<span class=\"token comment\" spellcheck=\"true\">// 并发访问的最大组合权重。</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewWeighted</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Weighted <span class=\"token punctuation\">{</span>\n   w <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Weighted<span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> w\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>w 结构</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// Weighted provides a way to bound concurrent access to a resource.</span>\n<span class=\"token comment\" spellcheck=\"true\">// The callers can request access with a given weight.</span>\n<span class=\"token comment\" spellcheck=\"true\">// NewWeighted使用给定的值创建一个新的加权信号量</span>\n<span class=\"token comment\" spellcheck=\"true\">// 并发访问的最大组合权重。</span>\n<span class=\"token keyword\">type</span> Weighted <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    size    <span class=\"token builtin\">int64</span>  <span class=\"token comment\" spellcheck=\"true\">//权重总数量</span>\n    cur     <span class=\"token builtin\">int64</span> <span class=\"token comment\" spellcheck=\"true\">//当前权重数量</span>\n    mu      sync<span class=\"token punctuation\">.</span>Mutex <span class=\"token comment\" spellcheck=\"true\">//全局互斥锁</span>\n    waiters list<span class=\"token punctuation\">.</span>List <span class=\"token comment\" spellcheck=\"true\">//双向链表,存waiter</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>waiter 结构</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> waiter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    n     <span class=\"token builtin\">int64</span> <span class=\"token comment\" spellcheck=\"true\">//需要权重数量</span>\n    ready <span class=\"token keyword\">chan</span><span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">// Closed when semaphore acquired. //通信channel ,无缓冲</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Acquire 方法:</p>\n<p>阻塞的获取指定权种的资源，如果没有空闲的资源，会进去休眠等待。</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// Acquire获取权重为n的信号量，阻塞直到资源可用或ctx完成。</span>\n<span class=\"token comment\" spellcheck=\"true\">// 成功时，返回nil。失败时返回 ctx.Err（）并保持信号量不变。</span>\n<span class=\"token comment\" spellcheck=\"true\">// 如果ctx已经完成，则Acquire仍然可以成功执行而不会阻塞</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Weighted<span class=\"token punctuation\">)</span> <span class=\"token function\">Acquire</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> n <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// fast path, 如果有足够的资源，都不考虑ctx.Done的状态，将cur加上n就返回</span>\n    <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>size<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">>=</span> n <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n      s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">+=</span> n\n      s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n    <span class=\"token punctuation\">}</span>\n  \n        <span class=\"token comment\" spellcheck=\"true\">// 如果是不可能完成的任务，请求的资源数大于能提供的最大的资源数</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">{</span>\n      s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 依赖ctx的状态返回，否则一直等待</span>\n      <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  \n        <span class=\"token comment\" spellcheck=\"true\">// 否则就需要把调用者加入到等待队列中</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 创建了一个ready chan,以便被通知唤醒</span>\n    ready <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 组装waiter</span>\n    w <span class=\"token operator\">:=</span> waiter<span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">,</span> ready<span class=\"token punctuation\">:</span> ready<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 插入waiters中</span>\n    elem <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">PushBack</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n    s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n\n        <span class=\"token comment\" spellcheck=\"true\">// 等待</span>\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">// context的Done被关闭</span>\n      err <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ready<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">// 如果被唤醒了，忽略ctx的状态</span>\n        err <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> 通知waiter\n        isFront <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> elem\n        s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 通知其它的waiters,检查是否有足够的资源</span>\n        <span class=\"token keyword\">if</span> isFront <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span>size <span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>cur <span class=\"token punctuation\">{</span>\n          s<span class=\"token punctuation\">.</span><span class=\"token function\">notifyWaiters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> err\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ready<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">// 被唤醒了</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"TryAcquire\"><a href=\"#TryAcquire\" class=\"headerlink\" title=\"TryAcquire\"></a>TryAcquire</h4><p>非阻塞地获取指定权重的资源，如果当前没有空闲资源，会直接返回<code>false</code>。</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// TryAcquire获取权重为n的信号量而不阻塞。</span>\n<span class=\"token comment\" spellcheck=\"true\">// 成功时返回true。 失败时，返回false并保持信号量不变。</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Weighted<span class=\"token punctuation\">)</span> <span class=\"token function\">TryAcquire</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    success <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>size<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">>=</span> n <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">if</span> success <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">+=</span> n\n    <span class=\"token punctuation\">}</span>\n    s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> success\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"Release-方法\"><a href=\"#Release-方法\" class=\"headerlink\" title=\"Release 方法\"></a>Release 方法</h4><p>用于释放指定权重的资源，如果有<code>waiters</code>则尝试去一一唤醒<code>waiter</code>。</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// Release释放权值为n的信号量。</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Weighted<span class=\"token punctuation\">)</span> <span class=\"token function\">Release</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">-=</span> n\n    <span class=\"token comment\" spellcheck=\"true\">// cur的范围在[0 - size]</span>\n    <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"semaphore: bad release\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">notifyWaiters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Weighted<span class=\"token punctuation\">)</span> <span class=\"token function\">notifyWaiters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 如果有阻塞的waiters，尝试去进行一一唤醒 </span>\n    <span class=\"token comment\" spellcheck=\"true\">// 唤醒的时候，先进先出，避免被资源比较大的waiter被饿死</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        next <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 已经没有waiter了</span>\n        <span class=\"token keyword\">if</span> next <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n\n        w <span class=\"token operator\">:=</span> next<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>waiter<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// waiter需要的资源不足</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>size<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">&lt;</span> w<span class=\"token punctuation\">.</span>n <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 没有足够的令牌供下一个waiter使用。我们可以继续（尝试</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 查找请求较小的waiter），但在负载下可能会导致</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 饥饿的大型请求；相反，我们留下所有剩余的waiter阻塞</span>\n            <span class=\"token comment\" spellcheck=\"true\">//</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 考虑一个用作读写锁的信号量，带有N个令牌，N个reader和一位writer</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 每个reader都可以通过Acquire（1）获取读锁。</span>\n            <span class=\"token comment\" spellcheck=\"true\">// writer写入可以通过Acquire（N）获得写锁定，但不包括所有的reader。</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 如果我们允许读者在队列中前进，writer将会饿死-总是有一个令牌可供每个读者。</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n\n        s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">+=</span> w<span class=\"token punctuation\">.</span>n\n        s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>ready<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>notifyWaiters 方法</p>\n<p>在<code>Acquire</code>和<code>Release</code>方法中都调用了<code>notifyWaiters</code></p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Weighted<span class=\"token punctuation\">)</span> <span class=\"token function\">notifyWaiters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 获取等待调用者队列中的队员</span>\n  next <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 没有要通知的调用者了</span>\n  <span class=\"token keyword\">if</span> next <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">break</span> <span class=\"token comment\" spellcheck=\"true\">// No more waiters blocked.</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 断言出waiter信息</span>\n  w <span class=\"token operator\">:=</span> next<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>waiter<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>size<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">&lt;</span> w<span class=\"token punctuation\">.</span>n <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 没有足够资源为下一个调用者使用时，继续阻塞该调用者，遵循先进先出的原则，</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 避免需要资源数比较大的waiter被饿死</span>\n   <span class=\"token comment\" spellcheck=\"true\">//</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 考虑一个场景，使用信号量作为读写锁，现有N个令牌，N个reader和一个writer</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 每个reader都可以通过Acquire（1）获取读锁，writer写入可以通过Acquire（N）获得写锁定</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 但不包括所有的reader，如果我们允许reader在队列中前进，writer将会饿死-总是有一个令牌可供每个reader</span>\n   <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 获取资源</span>\n  s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">+=</span> w<span class=\"token punctuation\">.</span>n\n  <span class=\"token comment\" spellcheck=\"true\">// 从waiter列表中移除</span>\n  s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 使用channel的close机制唤醒waiter</span>\n  <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>ready<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>需要注意一个点：唤醒<code>waiter</code>采用先进先出的原则，避免需要资源数比较大的waiter被饿死。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "golang",
                "golang",
                "package"
            ]
        },
        {
            "id": "https://costalong.com/2023/10/14/go/mutex/",
            "url": "https://costalong.com/2023/10/14/go/mutex/",
            "title": "golang 协程互斥锁",
            "date_published": "2023-10-14T13:43:14.000Z",
            "content_html": "<p>golang 在多协程的情况下，如果多个协程同时操作一个变量，会出现数据不一致的情况，这个时候就需要使用互斥锁来解决这个问题。</p>\n<h2 id=\"互斥锁-sync-Mutex\"><a href=\"#互斥锁-sync-Mutex\" class=\"headerlink\" title=\"互斥锁 (sync.Mutex)\"></a>互斥锁 (sync.Mutex)</h2><p>互斥即不可同时运行。即使用了互斥锁的两个代码片段互相排斥，只有其中一个代码片段执行完成后，另一个才能执行。</p>\n<p>Go 标准库中提供了 sync.Mutex 互斥锁类型及其两个方法：</p>\n<blockquote>\n<p>Lock 加锁<br>Unlock 释放锁</p>\n</blockquote>\n<h2 id=\"代码案例\"><a href=\"#代码案例\" class=\"headerlink\" title=\"代码案例\"></a>代码案例</h2><p>下面是没有使用锁一个例子情况：</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> setMap <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">func</span> <span class=\"token function\">printOnce</span><span class=\"token punctuation\">(</span>num <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> exist <span class=\"token operator\">:=</span> setMap<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>exist <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    setMap<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">printOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行 go run main.go 会发生什么情况呢？</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">go run main.go\n100\n100\n</code></pre>\n<p>多运行几次打印不同的结果, 有时候打印7次，有时候打印10次，有时候还触发 panic，是因为对同一个数据结构的访问冲突了。解决的方法使用 <code>Lock()</code> 与 <code>UnLock()</code> 的方法解决问题</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> m sync<span class=\"token punctuation\">.</span>Mutex\n<span class=\"token keyword\">var</span> setMap <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">printOnce</span><span class=\"token punctuation\">(</span>num <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> exist <span class=\"token operator\">:=</span> setMap<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>exist <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    setMap<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">printOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行 go run main.go </p>\n<pre class=\" language-sh\"><code class=\"language-sh\">go run main.go \n100\n</code></pre>\n<p><strong>注意</strong>:</p>\n<blockquote>\n<p>一个互斥锁只能同时被一个 goroutine 锁定，其它 goroutine 就算调用 Lock() 方法也会等待锁的释放。</p>\n</blockquote>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> m sync<span class=\"token punctuation\">.</span>Mutex\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goroutine1: 大概锁定 2s\"</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goroutine1: 锁定结束，准备退出\"</span><span class=\"token punctuation\">)</span>\n        ch <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goroutine2: 等待解锁\"</span><span class=\"token punctuation\">)</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goroutine2: 锁定结束\"</span><span class=\"token punctuation\">)</span>\n        ch <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 等待 goroutine 执行结束</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">&lt;-</span>ch\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>运行 go run main.go </p>\n<pre class=\" language-sh\"><code class=\"language-sh\"> go run main.go\ngoroutine1: 大概锁定 2s\ngoroutine2: 等待解锁\ngoroutine1: 锁定结束，准备退出\ngoroutine2: 锁定结束\n\n</code></pre>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "golang",
                "golang"
            ]
        }
    ]
}