{
    "version": "https://jsonfeed.org/version/1",
    "title": "翼舞成梦",
    "subtitle": "翼舞成梦",
    "icon": "https://costalong.com/images/favicon.ico",
    "description": "",
    "home_page_url": "https://costalong.com",
    "items": [
        {
            "id": "https://costalong.com/2023/01/28/git/",
            "url": "https://costalong.com/2023/01/28/git/",
            "title": "git 安装",
            "date_published": "2023-01-28T03:18:12.000Z",
            "content_html": "<p>最早Git是在Linux上开发的，很长一段时间内，Git也只能在Linux和Unix系统上跑。不过，慢慢地有人把它移植到了Windows上。现在，Git可以在Linux、Unix、Mac和Windows这几大平台上正常运行了。</p>\n<h2 id=\"Mac-install\"><a href=\"#Mac-install\" class=\"headerlink\" title=\"Mac install\"></a>Mac install</h2><pre class=\" language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token function\">git</span>\n</code></pre>\n<h2 id=\"Ubuntu-install\"><a href=\"#Ubuntu-install\" class=\"headerlink\" title=\"Ubuntu install\"></a>Ubuntu install</h2><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> apt <span class=\"token function\">install</span> <span class=\"token function\">git</span>\n</code></pre>\n<h2 id=\"git-提交标准\"><a href=\"#git-提交标准\" class=\"headerlink\" title=\"git 提交标准\"></a>git 提交标准</h2><p><img src=\"/medias/loading.gif\" data-original=\"http://file.longqiuhong.com/uploads/picgo/16315958305196.jpg\" alt=\"git 提交标准\"></p>\n<h2 id=\"git-常用命令\"><a href=\"#git-常用命令\" class=\"headerlink\" title=\"git 常用命令\"></a>git 常用命令</h2><p><img src=\"/medias/loading.gif\" data-original=\"https://file.longqiuhong.com/uploads/picgo/04453ab5aed44227919c808b392b48d6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"git 常用的命令\"></p>\n<p>查看代码版本：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git describe --always --tags --abbrev=0 --match 'v*' --exclude '*/*' | tr -d \"[\\r\\n]\"\n</code></pre>\n<p>删除tag</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git tag --delete  tag name  // v本地\ngit push origin :refs/tags/v1.0.0  // 删除远程 v1.0.0\n</code></pre>\n<p>修改tag 名称</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git tag new_tag old_tag\ngit tag -d old_tag\ngit push origin :refs/tags/old_tag\ngit push --tags\n</code></pre>\n<p>删除远程分支</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git push origin --delete <branchName>\n</code></pre>\n<p>强制切换到 commit_id 这个记录</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git reset --hard commit_id\n</code></pre>\n<p>强制提交到远程</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git push -f\n</code></pre>\n<p>删除本地的远程不存在的分支</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git remote prune origin\n</code></pre>\n<p><code>git commit</code>完之后，还没有执行<code>git push</code>，想修改/撤销这个<code>commit</code>，怎么办？<br>如果只是想修改注释，可以这样操作</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git commit --amend\n这个时候进入`vim`编辑，直接修改即可，修改完注释，退出`vim`编辑\n`:wq`保存已编辑的注释，重新`git push`即可\n</code></pre>\n<p>要撤回commit</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git reset --soft HEAD^\n这样就能成功的撤回你刚刚的`commit`操作。\nHEAD^的意思是上一个版本，也可以写成HEAD~1\n如果你进行了2次commit，想都撤回，可以使用HEAD~2\n</code></pre>\n<p><strong>注意，这个命令仅仅是撤回commit操作，写的代码仍然保留</strong></p>\n<p>恢复本地未提交内容</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git checkout .\n</code></pre>\n<pre class=\" language-sh\"><code class=\"language-sh\">git reset HEAD  *\n# 回退到上一个版本\ngit reset --hard HEAD^\n#回退到上上次版本\ngit reset --hard HEAD^^\ngit reset --hard HEAD^^^\n\n#回退到指定commitid的版本\ngit reset --hard  commit_id\n</code></pre>\n<p>恢复本地已提交内容</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git reset --hard\n</code></pre>\n<p>恢复远程未提交内容</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git fetch origin\ngit reset --hard origin/master\n</code></pre>\n<h2 id=\"git-常见的错误处理\"><a href=\"#git-常见的错误处理\" class=\"headerlink\" title=\"git 常见的错误处理\"></a>git 常见的错误处理</h2><p>1、fatal: Not possible to fast-forward, aborting.</p>\n<p>出现的原因：</p>\n<p>两个分之同时改了同样的地方，造成冲突。一般的情况使用 merge  合并分支</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git checkout master\ngit merge dev\n</code></pre>\n<p>如果出现代码冲突的时候需要手动解决，但是有时候是无法合并成功的。</p>\n<p>解决:</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git checkout master\ngit rebase dev\n</code></pre>\n<p>如果是一个分支，但是代码出现修改，也会出现改错误。</p>\n<p>解决:</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git pull origin master --rebase\n\ngit pull origin development --rebase\n\ngit pull origin test --rebase\n</code></pre>\n<p><strong>注意</strong> 修改冲突代码</p>\n<p>在提交代码</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">git push origin HEAD:develop     // develop 是分支\n</code></pre>\n<p>在冲突解决完毕并且提交代码后，执行下面的命令：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">// 在终端也会有需要执行这个命令的提示\ngit rebase --continue\n</code></pre>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "Tool",
                "git"
            ]
        }
    ]
}