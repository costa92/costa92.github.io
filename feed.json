{
    "version": "https://jsonfeed.org/version/1",
    "title": "翼舞成梦",
    "subtitle": "翼舞成梦",
    "icon": "https://costalong.com/images/favicon.ico",
    "description": "",
    "home_page_url": "https://costalong.com",
    "items": [
        {
            "id": "https://costalong.com/2023/09/09/k8s/initcontainers-mo-shi/",
            "url": "https://costalong.com/2023/09/09/k8s/initcontainers-mo-shi/",
            "title": "page",
            "date_published": "2023-09-09T15:05:13.000Z",
            "content_html": "<h1 id=\"initContainer使用\"><a href=\"#initContainer使用\" class=\"headerlink\" title=\"initContainer使用\"></a>initContainer使用</h1><h2 id=\"介绍：\"><a href=\"#介绍：\" class=\"headerlink\" title=\"介绍：\"></a>介绍：</h2><p>init容器是在同一个Pod中的其他容器之前启动和执行的容器。它的目的是<strong>为Pod上托管的主应用程序执行初始化逻辑</strong>。例如，创建必要的用户帐户、执行数据库迁移、创建数据库模式等等。</p>\n<h2 id=\"Init-Containers-注意事项\"><a href=\"#Init-Containers-注意事项\" class=\"headerlink\" title=\"Init Containers 注意事项\"></a>Init Containers 注意事项</h2><p>在创建 init 容器时，应该考虑一些注意事项：</p>\n<ol>\n<li><p>它们总是在 Pod 中的其他容器之前执行。因此，它们不应包含需要很长时间才能完成的复杂逻辑。启动脚本通常小而简洁。如果您发现向 init 容器添加了太多逻辑，则应考虑将其中的一部分移至应用程序容器本身。</p>\n</li>\n<li><p>init 容器按顺序启动和执行。除非成功完成其前任容器，否则不会调用 init 容器。因此，如果启动任务很长，您可以考虑将其分解为多个步骤，每个步骤由一个 init 容器处理，以便您知道哪些步骤失败。</p>\n</li>\n<li><p>如果任何 init 容器失败，整个 Pod 将重新启动（除非您将 restartPolicy 设置为 Never）。重新启动 Pod 意味着再次重新执行所有容器，包括任何 init 容器。因此，您可能需要确保启动逻辑可以容忍多次执行而不会导致重复。例如，如果数据库迁移已经完成，再次执行迁移命令应该被忽略。</p>\n</li>\n<li><p>init 容器是延迟应用程序初始化直到一个或多个依赖项可用的良好候选者。例如，如果您的应用程序依赖于强加 API 请求速率限制的 API，您可能需要等待特定时间段才能接收来自该 API 的响应。在应用程序容器中实现这个逻辑可能很复杂；因为它需要与健康和准备探测器相结合。一个更简单的方法是创建一个 init 容器，它会等待 API 准备就绪后再成功退出。只有在 init 容器成功完成其工作后，应用程序容器才会启动。</p>\n</li>\n<li><p>Init 容器不能像应用程序容器那样使用健康和就绪探测。原因是它们旨在成功启动和退出，就像 Jobs 和 CronJobs 的行为方式一样。</p>\n</li>\n<li><p>同一个 Pod 上的所有容器共享相同的 Volumes 和网络。您可以利用此功能在应用程序及其初始化容器之间共享数据。</p>\n</li>\n</ol>\n<h2 id=\"Init容器“Request”和“Limits”行为\"><a href=\"#Init容器“Request”和“Limits”行为\" class=\"headerlink\" title=\"Init容器“Request”和“Limits”行为\"></a>Init容器“Request”和“Limits”行为</h2><p>init 容器总是在同一个 Pod 上的其他应用程序容器之前启动。因此，调度程序对 init 容器的资源和限制给予更高的优先级。必须彻底考虑此类行为，因为它可能会导致不希望的结果。例如，如果你有一个 init 容器和一个应用程序容器，并且你将 init 容器的资源和限制设置为高于应用程序容器的资源和限制，那么只有在有一个满足 init 的可用节点时，整个 Pod 才会被调度容器要求。换句话说，即使有一个未使用的节点可以运行应用程序容器，如果 init 容器具有该节点可以处理的更高资源先决条件，Pod 也不会部署到该节点。因此，在定义 init 容器的请求和限制时，您应该尽可能严格。作为最佳实践，除非绝对需要，否则不要将这些参数设置为高于应用程序容器的值</p>\n<h5 id=\"应用场景01：为数据库做种\"><a href=\"#应用场景01：为数据库做种\" class=\"headerlink\" title=\"应用场景01：为数据库做种\"></a>应用场景01：为数据库做种</h5><p>在这个场景中，我们为 MySQL 数据库提供服务。该数据库用于测试应用程序。它不必包含真实数据，但必须填充足够的数据，以便我们可以测试应用程序的查询速度。我们使用 init 容器来处理 SQL 转储文件的下载并将其恢复到托管在另一个容器中的数据库。</p>\n<p>定义文件可能如下所示：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mydb\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> db\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">initContainers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> fetch\n      <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mwendler/wget\n      <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"wget\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"--no-check-certificate\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"https://sample-videos.com/sql/Sample-SQL-File-1000rows.sql\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-O\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/docker-entrypoint-initdb.d/dump.sql\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dump\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql\n      <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql\n      <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MYSQL_ROOT_PASSWORD\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"example\"</span>\n      <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dump\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">emptyDir</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dump\n</code></pre>\n<p>上面的定义创建了一个 Pod，它托管着两个容器：init 容器和应用程序容器。让我们来看看这个定义的有趣方面：</p>\n<ol>\n<li>init 容器负责下载包含数据库转储的 SQL 文件。我们使用 mwendler/wget 镜像，因为我们只需要 wget 命令。</li>\n<li>下载的 SQL 的目标目录是 MySQL 镜像用来执行 SQL 文件的目录（/docker-entrypoint-initdb.d）。此行为内置于我们在应用程序容器中使用的 MySQL 镜像中。</li>\n<li>init 容器将/docker-entrypoint-initdb.d挂载到emptyDir卷。因为两个容器都托管在同一个 Pod 上，所以它们共享相同的卷。因此，数据库容器可以访问放置在 emptyDir 卷上的 SQL 文件。</li>\n</ol>\n<h5 id=\"如果没有使用-InitContainers会发生什么？\"><a href=\"#如果没有使用-InitContainers会发生什么？\" class=\"headerlink\" title=\"如果没有使用 InitContainers会发生什么？\"></a>如果没有使用 InitContainers会发生什么？</h5><p>在这个例子中，我们使用初始化模式来建立关注点分离的最佳实践。如果我们在不使用 init 模式的情况下实现相同的逻辑，我们必须基于 mysql 基础镜像创建一个新镜像，安装 wget，并使用它来下载 SQL 文件。这种方法的缺点是：</p>\n<p>如果我们需要对下载逻辑进行任何更改，我们需要创建一个新镜像，推送它并更改其在定义文件中的引用。这增加了必须维护自定义镜像的负担。</p>\n<p>它在 DB 容器与其启动逻辑之间创建了紧密耦合的关系，这使得应用程序更难管理并增加了引入错误和错误的可能性。</p>\n<h2 id=\"场景-02：延迟应用程序启动，直到依赖项准备就绪\"><a href=\"#场景-02：延迟应用程序启动，直到依赖项准备就绪\" class=\"headerlink\" title=\"场景 02：延迟应用程序启动，直到依赖项准备就绪\"></a>场景 02：延迟应用程序启动，直到依赖项准备就绪</h2><p>init 容器的另一个常见用例是当您需要应用程序等待另一个服务完全运行（响应请求）时。以下定义演示了这种情况：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> myapp<span class=\"token punctuation\">-</span>pod\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> myapp\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">initContainers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> init<span class=\"token punctuation\">-</span>myservice\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.28</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'until nslookup myservice; do echo waiting for myservice; sleep 2; done;'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> myapp<span class=\"token punctuation\">-</span>container\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox<span class=\"token punctuation\">:</span><span class=\"token number\">1.28</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sh'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'echo The app is running! &amp;&amp; sleep 3600'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>因此，假设我们的应用程序在 myapp-container 上运行时无法正常运行，除非 myservice 应用程序正在运行。我们需要延迟 myapp 启动，直到 myservice 准备就绪。为此，我们使用一个简单的 nslookup 命令（第 11 行）不断检查“myservice”的名称解析是否成功。如果 nslookup 能够解析“myservice”，则服务将启动。使用成功退出代码，init 容器终止，让应用程序容器启动。否则，容器在再次尝试之前会休眠两秒钟，从而延迟应用程序容器的启动。</p>\n<p>为了完整起见，这是 myservice 的定义文件：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> myservice\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9376</span>\n</code></pre>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>初始化模式是设计需要启动逻辑的应用程序时要遵循的重要实践。</p>\n<p>Kubernetes 提供 init 容器作为将应用程序逻辑与其启动过程分离的一种手段。</p>\n<p>将应用程序初始化逻辑放在 init 容器中具有许多优点：</p>\n<ol>\n<li><p>您将强加关注点分离原则。一个应用程序可以有它的工程师团队，而它的初始化逻辑是由另一个团队编写的。</p>\n</li>\n<li><p>当涉及到授权和访问控制时，拥有一个单独的团队来处理应用程序的初始化步骤可以使公司更加灵活。例如，如果启动应用程序需要使用需要安全许可的资源（例如，修改防火墙规则），则可以由具有合适凭据的人员完成。应用团队不参与操作。</p>\n</li>\n<li><p>如果涉及的初始化步骤太多，可以将它们分解成多个 init 容器依次执行。如果一个步骤失败，init 容器会报告错误，这可以让您更好地了解逻辑的哪一部分不成功。</p>\n</li>\n</ol>\n<p>使用 init 容器时应考虑以下几点：</p>\n<ol>\n<li><p>初始化容器在失败时重新启动。因此，他们的代码必须是幂等的。</p>\n</li>\n<li><p>初始化容器是请求和限制首先由调度程序检查。不正确的值可能会对调度程序关于放置整个 Pod（包括应用程序容器）的位置的决定产生负面影响。</p>\n</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "k8s",
                "k8s"
            ]
        },
        {
            "id": "https://costalong.com/2023/09/03/k8s/csi-fen-xi-rong-qi-chu-cun-jie-kou/",
            "url": "https://costalong.com/2023/09/03/k8s/csi-fen-xi-rong-qi-chu-cun-jie-kou/",
            "title": "CSI--容器储存接口",
            "date_published": "2023-09-03T14:08:17.000Z",
            "content_html": "<h2 id=\"1-CSI简介–-储存接口\"><a href=\"#1-CSI简介–-储存接口\" class=\"headerlink\" title=\"1. CSI简介– 储存接口\"></a>1. CSI简介– 储存接口</h2><p>  k8s 的设计理念是支持可插拔架构，从而有利用扩展k8s 的功能。在次思想下，k8s 提供了 3 个特定功能得到接口，分别是：容器网络接口（CNI）、容器运行时接口（CRI）、容器储存接口（CSI）。本文主要介绍容器储存接口（CSI）。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "k8s",
                "k8s"
            ]
        },
        {
            "id": "https://costalong.com/2023/01/30/go-redis-jiao-cheng/",
            "url": "https://costalong.com/2023/01/30/go-redis-jiao-cheng/",
            "title": "go-redis 教程",
            "date_published": "2023-01-30T04:25:44.000Z",
            "content_html": "<h2 id=\"安装go-redis包\"><a href=\"#安装go-redis包\" class=\"headerlink\" title=\"安装go-redis包\"></a>安装go-redis包</h2><pre class=\" language-bash\"><code class=\"language-bash\">go get github.com/redis/go-redis/v9\n</code></pre>\n<h2 id=\"连接-redis-服务\"><a href=\"#连接-redis-服务\" class=\"headerlink\" title=\"连接 redis 服务\"></a>连接 redis 服务</h2><ol>\n<li>使用 options 方式</li>\n</ol>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"github.com/redis/go-redis/v9\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    rdb <span class=\"token operator\">:=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>redis<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">{</span>\n        Addr<span class=\"token punctuation\">:</span>\t  <span class=\"token string\">\"localhost:6379\"</span><span class=\"token punctuation\">,</span>\n        Password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// no password set</span>\n        DB<span class=\"token punctuation\">:</span>\t\t  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">// use default DB</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Ping</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"2\">\n<li>使用 dns 字符串方式</li>\n</ol>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"github.com/redis/go-redis/v9\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 注意 redis 是没有用户的，所以user 设置为空 </span>\n    opt<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">ParseURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis://&lt;user>:&lt;pass>@localhost:6379/&lt;db>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    rdb <span class=\"token operator\">:=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Ping</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"3\">\n<li>连接 redis 服务设置连接名字</li>\n</ol>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"github.com/redis/go-redis/v9\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 注意 redis 是没有用户的，所以user 设置为空 </span>\n    opt<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">ParseURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis://&lt;user>:&lt;pass>@localhost:6379/&lt;db>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    rdb <span class=\"token operator\">:=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Ping</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"redis-数据类型\"><a href=\"#redis-数据类型\" class=\"headerlink\" title=\"redis 数据类型\"></a>redis 数据类型</h2><p>redis 的数据类型有五种，分别为: 字符串(string)、列表(list)、集合(set)、哈希(hash)、有序集合(zset)</p>\n<h3 id=\"操作字符串-string\"><a href=\"#操作字符串-string\" class=\"headerlink\" title=\"操作字符串 (string)\"></a>操作字符串 (string)</h3><ol>\n<li>获取字符串内容执行命令</li>\n</ol>\n<p>redis 命令</p>\n<pre class=\" language-redis\"><code class=\"language-redis\">get mykey\n</code></pre>\n<p>直接返回结果</p>\n<pre class=\" language-go\"><code class=\"language-go\">key <span class=\"token operator\">:=</span> <span class=\"token string\">\"mykey\"</span>\nctx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nval<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>保存命令并稍后分别访问值与错误</p>\n<pre class=\" language-go\"><code class=\"language-go\">key <span class=\"token operator\">:=</span> <span class=\"token string\">\"mykey\"</span>\nctx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nget <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>get<span class=\"token punctuation\">.</span><span class=\"token function\">Val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>执行go-redis包不支持的命令</p>\n<pre class=\" language-go\"><code class=\"language-go\">key <span class=\"token operator\">:=</span> <span class=\"token string\">\"mykey\"</span>\nctx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nval<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> redis<span class=\"token punctuation\">.</span>Nil <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key dose not exists\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n</code></pre>\n<pre class=\" language-go\"><code class=\"language-go\">key <span class=\"token operator\">:=</span> <span class=\"token string\">\"mykey\"</span>\nctx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nval<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>帮助函数完整列表:</p>\n<pre class=\" language-go\"><code class=\"language-go\">s<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nflag<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nnum<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnum<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Int64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnum<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Uint64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnum<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Float32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnum<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Float64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nss<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">StringSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nns<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Int64Slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nns<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Uint64Slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfs<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Float32Slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfs<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Float64Slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbs<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">BoolSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ol start=\"2\">\n<li>设置字符串数据</li>\n</ol>\n<p>redis 命令</p>\n<pre class=\" language-redis\"><code class=\"language-redis\">set mykey \"ddd\" EX 10 \n</code></pre>\n<p>go-redis </p>\n<pre class=\" language-go\"><code class=\"language-go\">key <span class=\"token operator\">:=</span> <span class=\"token string\">\"mykey\"</span>\nctx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncmd <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>   \nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>设置key到期的时间</p>\n<pre class=\" language-go\"><code class=\"language-go\">expireAt <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddDate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nargs <span class=\"token operator\">:=</span> redis<span class=\"token punctuation\">.</span>SetArgs<span class=\"token punctuation\">{</span>\n    ExpireAt<span class=\"token punctuation\">:</span> expireAt\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\nctx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nerr <span class=\"token operator\">:=</span> rdb<span class=\"token punctuation\">.</span><span class=\"token function\">SetArgs</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "go",
                "redis"
            ]
        },
        {
            "id": "https://costalong.com/2023/01/28/hello-world/",
            "url": "https://costalong.com/2023/01/28/hello-world/",
            "title": "Hello World",
            "date_published": "2023-01-28T13:11:47.715Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span>\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": []
        },
        {
            "id": "https://costalong.com/2023/01/28/git/",
            "url": "https://costalong.com/2023/01/28/git/",
            "title": "git 安装",
            "date_published": "2023-01-28T03:18:12.000Z",
            "content_html": "<h2 id=\"Mac-install\"><a href=\"#Mac-install\" class=\"headerlink\" title=\"Mac install\"></a>Mac install</h2><pre class=\" language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token function\">git</span>\n</code></pre>\n<h2 id=\"Ubuntu-install\"><a href=\"#Ubuntu-install\" class=\"headerlink\" title=\"Ubuntu install\"></a>Ubuntu install</h2><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> apt <span class=\"token function\">install</span> <span class=\"token function\">git</span>\n</code></pre>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "Tool",
                "git"
            ]
        }
    ]
}