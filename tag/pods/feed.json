{
    "version": "https://jsonfeed.org/version/1",
    "title": "翼舞成梦",
    "subtitle": "翼舞成梦",
    "icon": "https://costalong.com/images/favicon.ico",
    "description": "",
    "home_page_url": "https://costalong.com",
    "items": [
        {
            "id": "https://costalong.com/2023/09/14/k8s/pod-elegant-stop/",
            "url": "https://costalong.com/2023/09/14/k8s/pod-elegant-stop/",
            "title": "pods 优雅终止",
            "date_published": "2023-09-14T14:08:44.000Z",
            "content_html": "<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Pod 销毁时，会停止容器内的进程，通常在停止的过程中我们需要执行一些善后逻辑，比如等待存量请求处理完以避免连接中断，或通知相关依赖进行清理等，从而实现优雅终止目的。本文介绍在 Kubernetes 场景下，实现容器优雅终止的最佳实践。</p>\n<h2 id=\"当-Kubernetes-杀死一个-pod-时，会发生以下-5-个步骤：\"><a href=\"#当-Kubernetes-杀死一个-pod-时，会发生以下-5-个步骤：\" class=\"headerlink\" title=\"当 Kubernetes 杀死一个 pod 时，会发生以下 5 个步骤：\"></a>当 Kubernetes 杀死一个 pod 时，会发生以下 5 个步骤：</h2><ol>\n<li>Pod 切换到终止状态并停止接收任何新流量，容器仍在 pod 内运行。</li>\n<li>preStop 钩子是一个特殊的命令或 HTTP 请求被执行，并被发送到 pod 内的容器。</li>\n<li>SIGTERM 信号被发送到 pod，容器意识到它将很快关闭。</li>\n<li>Kubernetes 等待宽限期 (terminationGracePeriodSeconds)。此等待与 preStop hook 和 SIGTERM 信号执行并行（默认 30 秒）。因此，Kubernetes 不会等待这些完成。如果这段时间结束，则直接进入下一步。正确设置宽限期的值非常重要。</li>\n<li>向 pod 发送 SIGKILL 信号，然后移除 pod。如果容器在宽限期后仍在运行，则 Pod 被 SIGKILL 强行移除，终止完成。</li>\n</ol>\n<p>总结下大致分为两步，第一步定义 preStop，一般情况下可以休眠 30s，用于处理残余流量；第二步发送 SIGTERM 信号，服务收到信号后进行服务的收尾工作处理。比如：关闭连接、通知第三方注册中心服务关闭…..</p>\n<h2 id=\"Pods-生命周期的状态\"><a href=\"#Pods-生命周期的状态\" class=\"headerlink\" title=\"Pods 生命周期的状态\"></a>Pods 生命周期的状态</h2><p>phase表示一个Pod处于其生命周期的哪个阶段，一共有以下5个可能的取值：</p>\n<ol>\n<li>Pending：Pod已经被k8s系统接受，但Pod中还有容器没有被创建。Pod被调度前和下载容器镜像的时候都处于这个阶段</li>\n<li>Running：Pod已经被调度到Node上，所有的容器都已经被创建，并且至少有一个容器还在运行中（正在启动或重启中的容器也算）</li>\n<li>Succeeded：Pod中的所有容器都成功停止，并且不会再次重启</li>\n<li>Failed：Pod中的所有容器都已经停止，并且至少有一个容器是以失败停止的（以非0状态退出或被系统强制停止）</li>\n<li>Unknown：由于某种原因无法获得Pod的状态，一般是和Pod所在的Host出现通信问题导致</li>\n</ol>\n<p>Pod phase的查看方式：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">kubectl get pods whoami-78c854646d-nhgl9 -o yaml |grep 'phase:'\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\"> phase: Running\n</code></pre>\n<h2 id=\"k8s-lifecycle-用法\"><a href=\"#k8s-lifecycle-用法\" class=\"headerlink\" title=\"k8s lifecycle 用法\"></a>k8s lifecycle 用法</h2><p>lifecycle 周期有两个hook钩子 postStart 与 preStop  </p>\n<ol>\n<li>PostStart hook是在容器创建(created)之后立马被调用，并且PostStart跟容器的ENTRYPOINT是异步执行的，无法保证它们之间的顺序.</li>\n<li>PreStop hook是容器处于Terminated状态时立马被调用(也就是说要是Job任务的话，执行完之后其状态为completed，所以不会触发PreStop的钩子)，同时PreStop是同步阻塞的，PreStop执行完才会执行删除Pod的操作</li>\n</ol>\n<p>注意:<br>PostStart 会阻塞容器成为Running状态,PreStop 会阻塞容器的删除，但是过了 terminationGracePeriodSeconds时间后，容器会被强制删除,<br>如果PreStop或者PostStart失败的话, 容器会被杀死;</p>\n<h3 id=\"钩子的回调函数支持三种方式定义动作：\"><a href=\"#钩子的回调函数支持三种方式定义动作：\" class=\"headerlink\" title=\"钩子的回调函数支持三种方式定义动作：\"></a>钩子的回调函数支持三种方式定义动作：</h3><ol>\n<li>exec：在容器内执行命令，如果命令的退出状态码是 0 表示执行成功，否则表示失败</li>\n</ol>\n<pre class=\" language-yaml\"><code class=\"language-yaml\">  lifecycle：\n    <span class=\"token key atrule\">postStart</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> cat\n        <span class=\"token punctuation\">-</span> /tmp/healthy\n</code></pre>\n<ol start=\"2\">\n<li>httpGet：向指定 URL 发起 GET 请求，如果返回的 HTTP 状态码在 [200, 400) 之间表示请求成功，否则表示失败</li>\n</ol>\n<pre class=\" language-yaml\"><code class=\"language-yaml\">lifecycle：\n    <span class=\"token key atrule\">postStart</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /login   <span class=\"token comment\" spellcheck=\"true\"># URI地址</span>\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80  </span><span class=\"token comment\" spellcheck=\"true\"># 端口号</span>\n        <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.126.100 <span class=\"token comment\" spellcheck=\"true\"># 主机地址</span>\n        <span class=\"token key atrule\">scheme</span><span class=\"token punctuation\">:</span> HTTP   <span class=\"token comment\" spellcheck=\"true\"># 支持的协议，http或https</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># http://192.168.126.100:80/login</span>\n</code></pre>\n<ol start=\"3\">\n<li>TCPSocket：在容器尝试访问指定的socket</li>\n</ol>\n<pre class=\" language-yaml\"><code class=\"language-yaml\">  lifecycle：\n    <span class=\"token key atrule\">postStart</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">tcpSocket</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n</code></pre>\n<p>Example:</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">creationTimestamp</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">null</span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">creationTimestamp</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">null</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n          <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">lifecycle</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">postStart</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"echo 11 >> /usr/share/nginx/html/index.html\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\" spellcheck=\"true\"># 启动容器应用之后执行</span>\n            <span class=\"token key atrule\">preStop</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"echo 'Hello from the preStop handler' >> /var/log/nginx/message\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">## 删除pod 完成之前执行</span>\n<span class=\"token key atrule\">status</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "k8s",
                "k8s",
                "pods"
            ]
        }
    ]
}