{
    "version": "https://jsonfeed.org/version/1",
    "title": "翼舞成梦",
    "subtitle": "翼舞成梦",
    "icon": "https://costalong.com/images/favicon.ico",
    "description": "",
    "home_page_url": "https://costalong.com",
    "items": [
        {
            "id": "https://costalong.com/2024/07/16/go/package/semaphore/",
            "url": "https://costalong.com/2024/07/16/go/package/semaphore/",
            "title": "semaphore 信号量",
            "date_published": "2024-07-16T15:00:20.000Z",
            "content_html": "<p>源代码:  golang.org/x/sync/semaphore</p>\n<h1 id=\"semaphore-信号量\"><a href=\"#semaphore-信号量\" class=\"headerlink\" title=\"semaphore  信号量\"></a>semaphore  信号量</h1><p>源代码:  golang.org/x/sync/semaphore</p>\n<ol>\n<li>创建</li>\n</ol>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// NewWeighted使用给定的值创建一个新的加权信号量</span>\n<span class=\"token comment\" spellcheck=\"true\">// 并发访问的最大组合权重。</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewWeighted</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Weighted <span class=\"token punctuation\">{</span>\n   w <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Weighted<span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> w\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>w 结构</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// Weighted provides a way to bound concurrent access to a resource.</span>\n<span class=\"token comment\" spellcheck=\"true\">// The callers can request access with a given weight.</span>\n<span class=\"token comment\" spellcheck=\"true\">// NewWeighted使用给定的值创建一个新的加权信号量</span>\n<span class=\"token comment\" spellcheck=\"true\">// 并发访问的最大组合权重。</span>\n<span class=\"token keyword\">type</span> Weighted <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    size    <span class=\"token builtin\">int64</span>  <span class=\"token comment\" spellcheck=\"true\">//权重总数量</span>\n    cur     <span class=\"token builtin\">int64</span> <span class=\"token comment\" spellcheck=\"true\">//当前权重数量</span>\n    mu      sync<span class=\"token punctuation\">.</span>Mutex <span class=\"token comment\" spellcheck=\"true\">//全局互斥锁</span>\n    waiters list<span class=\"token punctuation\">.</span>List <span class=\"token comment\" spellcheck=\"true\">//双向链表,存waiter</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>waiter 结构</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> waiter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    n     <span class=\"token builtin\">int64</span> <span class=\"token comment\" spellcheck=\"true\">//需要权重数量</span>\n    ready <span class=\"token keyword\">chan</span><span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">// Closed when semaphore acquired. //通信channel ,无缓冲</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Acquire 方法:</p>\n<p>阻塞的获取指定权种的资源，如果没有空闲的资源，会进去休眠等待。</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// Acquire获取权重为n的信号量，阻塞直到资源可用或ctx完成。</span>\n<span class=\"token comment\" spellcheck=\"true\">// 成功时，返回nil。失败时返回 ctx.Err（）并保持信号量不变。</span>\n<span class=\"token comment\" spellcheck=\"true\">// 如果ctx已经完成，则Acquire仍然可以成功执行而不会阻塞</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Weighted<span class=\"token punctuation\">)</span> <span class=\"token function\">Acquire</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> n <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// fast path, 如果有足够的资源，都不考虑ctx.Done的状态，将cur加上n就返回</span>\n    <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>size<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">>=</span> n <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n      s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">+=</span> n\n      s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n    <span class=\"token punctuation\">}</span>\n  \n        <span class=\"token comment\" spellcheck=\"true\">// 如果是不可能完成的任务，请求的资源数大于能提供的最大的资源数</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">{</span>\n      s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 依赖ctx的状态返回，否则一直等待</span>\n      <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  \n        <span class=\"token comment\" spellcheck=\"true\">// 否则就需要把调用者加入到等待队列中</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 创建了一个ready chan,以便被通知唤醒</span>\n    ready <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 组装waiter</span>\n    w <span class=\"token operator\">:=</span> waiter<span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">,</span> ready<span class=\"token punctuation\">:</span> ready<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 插入waiters中</span>\n    elem <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">PushBack</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n    s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n\n        <span class=\"token comment\" spellcheck=\"true\">// 等待</span>\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">// context的Done被关闭</span>\n      err <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ready<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">// 如果被唤醒了，忽略ctx的状态</span>\n        err <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> 通知waiter\n        isFront <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> elem\n        s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 通知其它的waiters,检查是否有足够的资源</span>\n        <span class=\"token keyword\">if</span> isFront <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span>size <span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>cur <span class=\"token punctuation\">{</span>\n          s<span class=\"token punctuation\">.</span><span class=\"token function\">notifyWaiters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> err\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ready<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">// 被唤醒了</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"TryAcquire\"><a href=\"#TryAcquire\" class=\"headerlink\" title=\"TryAcquire\"></a>TryAcquire</h4><p>非阻塞地获取指定权重的资源，如果当前没有空闲资源，会直接返回<code>false</code>。</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// TryAcquire获取权重为n的信号量而不阻塞。</span>\n<span class=\"token comment\" spellcheck=\"true\">// 成功时返回true。 失败时，返回false并保持信号量不变。</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Weighted<span class=\"token punctuation\">)</span> <span class=\"token function\">TryAcquire</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    success <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>size<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">>=</span> n <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">if</span> success <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">+=</span> n\n    <span class=\"token punctuation\">}</span>\n    s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> success\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"Release-方法\"><a href=\"#Release-方法\" class=\"headerlink\" title=\"Release 方法\"></a>Release 方法</h4><p>用于释放指定权重的资源，如果有<code>waiters</code>则尝试去一一唤醒<code>waiter</code>。</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// Release释放权值为n的信号量。</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Weighted<span class=\"token punctuation\">)</span> <span class=\"token function\">Release</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">-=</span> n\n    <span class=\"token comment\" spellcheck=\"true\">// cur的范围在[0 - size]</span>\n    <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"semaphore: bad release\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">notifyWaiters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    s<span class=\"token punctuation\">.</span>mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Weighted<span class=\"token punctuation\">)</span> <span class=\"token function\">notifyWaiters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 如果有阻塞的waiters，尝试去进行一一唤醒 </span>\n    <span class=\"token comment\" spellcheck=\"true\">// 唤醒的时候，先进先出，避免被资源比较大的waiter被饿死</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        next <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 已经没有waiter了</span>\n        <span class=\"token keyword\">if</span> next <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n\n        w <span class=\"token operator\">:=</span> next<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>waiter<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// waiter需要的资源不足</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>size<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">&lt;</span> w<span class=\"token punctuation\">.</span>n <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 没有足够的令牌供下一个waiter使用。我们可以继续（尝试</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 查找请求较小的waiter），但在负载下可能会导致</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 饥饿的大型请求；相反，我们留下所有剩余的waiter阻塞</span>\n            <span class=\"token comment\" spellcheck=\"true\">//</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 考虑一个用作读写锁的信号量，带有N个令牌，N个reader和一位writer</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 每个reader都可以通过Acquire（1）获取读锁。</span>\n            <span class=\"token comment\" spellcheck=\"true\">// writer写入可以通过Acquire（N）获得写锁定，但不包括所有的reader。</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 如果我们允许读者在队列中前进，writer将会饿死-总是有一个令牌可供每个读者。</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n\n        s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">+=</span> w<span class=\"token punctuation\">.</span>n\n        s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>ready<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>notifyWaiters 方法</p>\n<p>在<code>Acquire</code>和<code>Release</code>方法中都调用了<code>notifyWaiters</code></p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Weighted<span class=\"token punctuation\">)</span> <span class=\"token function\">notifyWaiters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 获取等待调用者队列中的队员</span>\n  next <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 没有要通知的调用者了</span>\n  <span class=\"token keyword\">if</span> next <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">break</span> <span class=\"token comment\" spellcheck=\"true\">// No more waiters blocked.</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 断言出waiter信息</span>\n  w <span class=\"token operator\">:=</span> next<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>waiter<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>size<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">&lt;</span> w<span class=\"token punctuation\">.</span>n <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 没有足够资源为下一个调用者使用时，继续阻塞该调用者，遵循先进先出的原则，</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 避免需要资源数比较大的waiter被饿死</span>\n   <span class=\"token comment\" spellcheck=\"true\">//</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 考虑一个场景，使用信号量作为读写锁，现有N个令牌，N个reader和一个writer</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 每个reader都可以通过Acquire（1）获取读锁，writer写入可以通过Acquire（N）获得写锁定</span>\n   <span class=\"token comment\" spellcheck=\"true\">// 但不包括所有的reader，如果我们允许reader在队列中前进，writer将会饿死-总是有一个令牌可供每个reader</span>\n   <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 获取资源</span>\n  s<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">+=</span> w<span class=\"token punctuation\">.</span>n\n  <span class=\"token comment\" spellcheck=\"true\">// 从waiter列表中移除</span>\n  s<span class=\"token punctuation\">.</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 使用channel的close机制唤醒waiter</span>\n  <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>ready<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>需要注意一个点：唤醒<code>waiter</code>采用先进先出的原则，避免需要资源数比较大的waiter被饿死。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "golang",
                "golang",
                "package"
            ]
        }
    ]
}