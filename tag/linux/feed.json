{
    "version": "https://jsonfeed.org/version/1",
    "title": "翼舞成梦",
    "subtitle": "翼舞成梦",
    "icon": "https://costalong.com/images/favicon.ico",
    "description": "",
    "home_page_url": "https://costalong.com",
    "items": [
        {
            "id": "https://costalong.com/2024/07/16/linux/netstat/",
            "url": "https://costalong.com/2024/07/16/linux/netstat/",
            "title": "Linux 网络工具 netstat",
            "date_published": "2024-07-16T02:30:48.000Z",
            "content_html": "<h1 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h1><h2 id=\"1-netstat-命令\"><a href=\"#1-netstat-命令\" class=\"headerlink\" title=\"1. netstat 命令\"></a>1. netstat 命令</h2><p>netstat 命令用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre class=\" language-sh\"><code class=\"language-sh\">netstat [-acCeFghilMnNoprstuvVwx][-A<网络类型>][--ip]\n</code></pre>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><pre class=\" language-sh\"><code class=\"language-sh\">-a或--all 显示所有连线中的Socket。\n-A<网络类型>或--<网络类型> 列出该网络类型连线中的相关地址。\n-c或--continuous 持续列出网络状态。\n-C或--cache 显示路由器配置的快取信息。\n-e或--extend 显示网络其他相关信息。\n-F或--fib 显示路由缓存。\n-g或--groups 显示多重广播功能群组组员名单。\n-h或--help 在线帮助。\n-i或--interfaces 显示网络界面信息表单。\n-l或--listening 显示监控中的服务器的Socket。\n-M或--masquerade 显示伪装的网络连线。\n-n或--numeric 直接使用IP地址，而不通过域名服务器。\n-N或--netlink或--symbolic 显示网络硬件外围设备的符号连接名称。\n-o或--timers 显示计时器。\n-p或--programs 显示正在使用Socket的程序识别码和程序名称。\n-r或--route 显示Routing Table。\n-s或--statistics 显示网络工作信息统计表。\n-t或--tcp 显示TCP传输协议的连线状况。\n-u或--udp 显示UDP传输协议的连线状况。\n-v或--verbose 显示指令执行过程。\n-V或--version 显示版本信息。\n-w或--raw 显示RAW传输协议的连线状况。\n-x或--unix 此参数的效果和指定\"-A unix\"参数相同。\n--ip或--inet 此参数的效果和指定\"-A inet\"参数相同。\n</code></pre>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><h4 id=\"1-显示网络状态\"><a href=\"#1-显示网络状态\" class=\"headerlink\" title=\"1. 显示网络状态\"></a>1. 显示网络状态</h4><pre class=\" language-sh\"><code class=\"language-sh\">netstat -a\n</code></pre>\n<p>结果：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">Proto Recv-Q Send-Q Local Address           Foreign Address         State\ntcp        0      0 192.168.122.1:domain    0.0.0.0:*               LISTEN\ntcp        0      0 localhost:ipp           0.0.0.0:*               LISTEN\ntcp        0      0 localhost:35600         0.0.0.0:*               LISTEN\ntcp        0      0 127.0.0.54:domain       0.0.0.0:*               LISTEN\ntcp        0      0 localhost:31080         0.0.0.0:*               LISTEN\ntcp        0      0 localhost:31055         0.0.0.0:*               LISTEN\ntcp        0      0 hellotalk:domain        0.0.0.0:*               LISTEN\ntcp        0      0 127.0.0.53:domain       0.0.0.0:*               LISTEN\ntcp        0      0 172.16.0.112:50006      113.240.72.111:https    TIME_WAIT\ntcp        0      0 10.100.100.164:56010    10.40.2.11:27017        ESTABLISHED\ntcp        0      0 10.100.100.164:43846    10.40.2.5:27017         ESTABLISHED\n</code></pre>\n<p>字段说明：</p>\n<p>1.Proto：传输层协议 TCP 或 UDP</p>\n<p>2.Recv-Q：接收队列</p>\n<p>3.Send-Q：发送队列</p>\n<p>4.Local Address：本地地址</p>\n<p>5.Foreign Address：远程地址</p>\n<p>6.State：状态 LISTEN：侦听，ESTABLISHED：已建立，TIME_WAIT：关闭</p>\n<h4 id=\"2-显示当前户籍-UDP-连接状况\"><a href=\"#2-显示当前户籍-UDP-连接状况\" class=\"headerlink\" title=\"2. 显示当前户籍 UDP 连接状况\"></a>2. 显示当前户籍 UDP 连接状况</h4><pre class=\" language-sh\"><code class=\"language-sh\">netstat -nu\n</code></pre>\n<p>结果：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">激活Internet连接 (w/o 服务器)\nProto Recv-Q Send-Q Local Address           Foreign Address         State\nudp        0      0 127.0.0.1:56871         127.0.1.1:53            ESTABLISHED\nudp        0      0 172.16.0.112:42799      106.38.222.156:443      ESTABLISHED\nudp        0      0 172.16.0.112:68         172.16.0.1:67           ESTABLISHED\n</code></pre>\n<h4 id=\"3-显示当前户籍-TCP-连接状况\"><a href=\"#3-显示当前户籍-TCP-连接状况\" class=\"headerlink\" title=\"3. 显示当前户籍 TCP 连接状况\"></a>3. 显示当前户籍 TCP 连接状况</h4><pre class=\" language-sh\"><code class=\"language-sh\">netstat -nt\n</code></pre>\n<p>结果：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">激活Internet连接 (w/o 服务器)\nProto Recv-Q Send-Q Local Address           Foreign Address         State\ntcp        0      0 10.100.100.164:56010    10.40.2.11:27017        ESTABLISHED\ntcp        0      0 10.100.100.164:43846    10.40.2.5:27017         ESTABLISHED\ntcp        0      0 172.16.0.112:60087      43.159.193.150:8002     TIME_WAIT\ntcp        0      0 172.16.0.112:57712      113.240.72.99:443       TIME_WAIT\ntcp        0      0 10.100.100.164:55986    10.40.2.11:27017        ESTABLISHED\ntcp        0      0 10.100.100.164:43722    10.40.2.5:27017         ESTABLISHED\n</code></pre>\n<h4 id=\"4-显示当前系统中所有正在监听的-TCP-端口、相关的进程以及其状态\"><a href=\"#4-显示当前系统中所有正在监听的-TCP-端口、相关的进程以及其状态\" class=\"headerlink\" title=\"4. 显示当前系统中所有正在监听的 TCP 端口、相关的进程以及其状态\"></a>4. 显示当前系统中所有正在监听的 TCP 端口、相关的进程以及其状态</h4><pre class=\" language-sh\"><code class=\"language-sh\">netstat -ntlp\n</code></pre>\n<p>结果：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">Active Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1234/nginx\ntcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      2345/mysqld\ntcp6       0      0 :::22                   :::*                    LISTEN      3456/sshd\n</code></pre>\n<p>字段解析：</p>\n<ol>\n<li><p>Proto：协议</p>\n<ul>\n<li>tcp：表示 TCP 协议。</li>\n<li>tcp6：表示 IPv6 的 TCP 协议。</li>\n</ul>\n</li>\n<li><p>Recv-Q 和 Send-Q：</p>\n<ul>\n<li>Recv-Q：表示接收队列</li>\n<li>Send-Q：表示发送队列</li>\n</ul>\n</li>\n<li><p>Local Address：本地地址</p>\n<ul>\n<li>0.0.0.0:80：本地地址和端口号，0.0.0.0 表示监听所有接口的 IP 地址，80 是端口号。</li>\n<li>127.0.0.1:3306：本地环回地址（localhost）上的端口 3306。</li>\n<li>:::22：IPv6 地址的端口 22。</li>\n</ul>\n</li>\n<li><p>Foreign Address：远程地址</p>\n<ul>\n<li>0.0.0.0:* 和 :::*：表示监听所有外部地址。</li>\n</ul>\n</li>\n<li><p>State：状态</p>\n<ul>\n<li>LISTEN：表示服务器正在监听 TCP 连接请求。</li>\n<li>ESTABLISHED：表示连接已经建立。</li>\n<li>TIME_WAIT：表示主动关闭连接的一方在关闭连接后，等待 2MSL 后依然没有收到对方的 FIN 报文，处于等待关闭状态。</li>\n<li>CLOSE_WAIT：表示被动关闭连接的一方在收到对方的 FIN 报文后，等待应用进程关闭连接。</li>\n<li>LAST_ACK：表示被动关闭连接的一方在发送完 FIN 报文后，等待对方的 ACK 报文，如果收到 ACK 报文，则处于 CLOSED 状态，否则处于 TIME_WAIT 状态。</li>\n<li>CLOSED：表示连接已经关闭。</li>\n<li>SYN_RECV：表示正在等待处理的请求数目。</li>\n<li>SYN_SENT：表示正在等待远程连接请求。</li>\n<li>CLOSING：表示正在等待远程连接关闭请求。</li>\n<li>UNKNOWN：表示未知状态。</li>\n<li>LISTENING：表示正在等待远程连接请求。</li>\n<li>IDLE：表示连接处于空闲状态。</li>\n<li>BOUND：表示正在等待远程连接请求。</li>\n<li>FIN_WAIT1: 套接字已经发出了一个 FIN 请求，表示它已经完成了发送数据，正在等待对方的 ACK 响应。</li>\n<li>FIN_WAIT2: 套接字收到了对 FIN 请求的 ACK 响应，正在等待对方发出 FIN 请求。</li>\n</ul>\n</li>\n<li><p>PID/Program name：进程 ID 和进程名称</p>\n<ul>\n<li>1234/nginx：进程 ID 为 1234 的 nginx 进程正在监听 80 端口。</li>\n<li>2345/mysqld：进程 ID 为 2345 的 mysqld 进程正在监听 3306 端口。</li>\n<li>3456/sshd：进程 ID 为 3456 的 sshd 进程正在监听 22 端口。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"5-显示网卡列表\"><a href=\"#5-显示网卡列表\" class=\"headerlink\" title=\"5. 显示网卡列表\"></a>5. 显示网卡列表</h4><pre class=\" language-sh\"><code class=\"language-sh\"> netstat -i\n</code></pre>\n<p>结果：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">Iface             MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg\nbr-717e070443f8  1500        0      0      0 0             0      0      0      0 BMU\nbr-7f56e5476213  1500        0      0      0 0             0      0      0      0 BMU\ndocker0          1500        0      0      0 0             0      0      0      0 BMU\neno1             1500  3838424      0      0 0       3615697      0      0      0 BMRU\nlo              65536  1115368      0      0 0       1115368      0      0      0 LRU\nutun             1400  2667684      0      0 0       2598307      0      0      0 MOPRU\nvirbr0           1500        0      0      0 0             0      0      0      0 BMU\n</code></pre>\n<p>字段解析：</p>\n<ol>\n<li>Iface：网卡名称</li>\n<li>MTU：最大传输单元</li>\n<li>RX-OK：接收数据包总数</li>\n<li>RX-ERR：接收数据包错误总数</li>\n<li>RX-DRP：接收数据包丢弃总数</li>\n<li>RX-OVR：接收数据包溢出总数</li>\n<li>TX-OK：发送数据包总数</li>\n<li>TX-ERR：发送数据包错误总数</li>\n<li>TX-DRP：发送数据包丢弃总数</li>\n<li>TX-OVR：发送数据包溢出总数</li>\n<li>Flg：标志</li>\n</ol>\n<ul>\n<li>BMU：广播地址</li>\n<li>BMRU：广播地址和多播地址</li>\n<li>MOPRU：多播地址</li>\n<li>LRU：本地地址</li>\n<li>MPRU：多播地址和本地地址</li>\n<li>OPRU：多播地址和本地地址和广播地址</li>\n<li>ALL：所有地址</li>\n</ul>\n<p>###＃ 6. 显示组播组的关系</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">netstat -g\n</code></pre>\n<p>结果：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">IPv6/IPv4 Group Memberships\nInterface       RefCnt Group\n--------------- ------ ---------------------\nlo              1      mdns.mcast.net\nlo              1      all-systems.mcast.net\n</code></pre>\n<p>字段解析：</p>\n<ol>\n<li>Interface：网卡名称</li>\n<li>RefCnt：引用计数</li>\n<li>Group：组播组</li>\n</ol>\n<p>###＃ 7. 显示网络统计信息</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">netstat -s\n</code></pre>\n<p>结果：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">Ip:\n    Forwarding: 1\n    7269919 total packets received\n    0 forwarded\n    0 incoming packets discarded\n    7265662 incoming packets delivered\n    7078118 requests sent out\n    28 outgoing packets dropped\n    7895 dropped because of missing route\n    8416 reassemblies required\n    4208 packets reassembled ok\n    6 outgoing packets failed fragmentation\n    OutTransmits: 7078115\nIcmp:\n    2022 ICMP messages received\n    6 input ICMP message failed\n    ICMP接收历史\n        destination unreachable: 2020\n        echo requests: 2\n    2176 ICMP messages sent\n    0 ICMP messages failed\n    OutRateLimitHost: 253\n    ICMP发出历史\n        destination unreachable: 2174\n        echo replies: 2\nIcmpMsg:\n        InType3: 2020\n        InType8: 2\n        OutType0: 2\n        OutType3: 2174\nTcp:\n    202192 active connection openings\n    10375 passive connection openings\n    120686 failed connection attempts\n    3047 connection resets received\n    77 connections established\n    6857878 segments received\n    7083293 segments sent out\n    16799 segments retransmitted\n    1119 bad segments received\n    131681 resets sent\nUdp:\n    1456958 packets received\n    2421 packets to unknown port received\n    32 packet receive errors\n    556388 packets sent\n    0 receive buffer errors\n    8 send buffer errors\n    InCsumErrors: 32\n    IgnoredMulti: 12191\nUdpLite:\nTcpExt:\n    3 ICMP packets dropped because they were out-of-window\n    30122 TCP sockets finished time wait in fast timer\n    1 packets rejected in established connections because of timestamp\n    119999 delayed acks sent\n    39 delayed acks further delayed because of locked socket\n    Quick ack mode was activated 34511 times\n    1065795 packet headers predicted\n    687289 acknowledgments not containing data payload received\n    1455607 predicted acknowledgments\n    TCPSackRecovery: 327\n    Detected reordering 676 times using SACK\n    TCPDSACKUndo: 97\n    87 congestion windows recovered without slow start after partial ack\n    TCPLostRetransmit: 8875\n    TCPSackFailures: 8\n    3 timeouts in loss state\n    466 fast retransmits\n    133 retransmits in slow start\n    TCPTimeouts: 11823\n    TCPLossProbes: 5420\n    TCPLossProbeRecovery: 82\n    TCPSackRecoveryFail: 10\n    TCPBacklogCoalesce: 2369\n    TCPDSACKOldSent: 34608\n    TCPDSACKOfoSent: 51\n    TCPDSACKRecv: 1827\n    TCPDSACKOfoRecv: 16\n    1537 connections reset due to unexpected data\n    2171 connections reset due to early user close\n    484 connections aborted due to timeout\n    10 times unable to send RST due to no memory\n    TCPSACKDiscard: 2\n    TCPDSACKIgnoredOld: 7\n    TCPDSACKIgnoredNoUndo: 815\n    TCPSackShifted: 26\n    TCPSackMerged: 342\n    TCPSackShiftFallback: 1984\n    IPReversePathFilter: 22\n    TCPRcvCoalesce: 203651\n    TCPOFOQueue: 50737\n    TCPOFOMerge: 54\n    TCPChallengeACK: 879\n    TCPSYNChallenge: 1140\n    TCPSpuriousRtxHostQueues: 18\n    TCPAutoCorking: 458417\n    TCPFromZeroWindowAdv: 35\n    TCPToZeroWindowAdv: 35\n    TCPWantZeroWindowAdv: 167\n    TCPSynRetrans: 7312\n    TCPOrigDataSent: 3398432\n    TCPHystartTrainDetect: 22\n    TCPHystartTrainCwnd: 1073\n    TCPHystartDelayDetect: 42\n    TCPHystartDelayCwnd: 1831\n    TCPACKSkippedSeq: 286\n    TCPACKSkippedChallenge: 265\n    TCPKeepAlive: 97079\n    TCPDelivered: 3475194\n    TCPAckCompressed: 14499\n    TcpTimeoutRehash: 11471\n    TCPDSACKRecvSegs: 1841\n    TCPDSACKIgnoredDubious: 2\nIpExt:\n    InNoRoutes: 17\n    InMcastPkts: 118643\n    OutMcastPkts: 8410\n    InBcastPkts: 17704\n    OutBcastPkts: 1960\n    InOctets: 3807905209\n    OutOctets: 1523626052\n    InMcastOctets: 53391437\n    OutMcastOctets: 1586713\n    InBcastOctets: 9013152\n    OutBcastOctets: 152880\n    InNoECTPkts: 7512863\n    InECT0Pkts: 18\nMPTcpExt:\n</code></pre>\n<h4 id=\"显示监听的套接口\"><a href=\"#显示监听的套接口\" class=\"headerlink\" title=\"显示监听的套接口\"></a>显示监听的套接口</h4><pre class=\" language-sh\"><code class=\"language-sh\">netstat -l\n</code></pre>\n<pre class=\" language-sh\"><code class=\"language-sh\">激活Internet连接 (仅服务器)\nProto Recv-Q Send-Q Local Address           Foreign Address         State      \ntcp        0      0 hellotalk:domain        0.0.0.0:*               LISTEN     \ntcp6       0      0 [::]:3100               [::]:*                  LISTEN     \nudp        0      0 0.0.0.0:45010           0.0.0.0:*                                            \nudp        0      0 0.0.0.0:mdns            0.0.0.0:*                          \nudp6       0      0 [::]:49287              [::]:*                             \n              7          \n活跃的UNIX域套接字 (仅服务器)\nProto RefCnt Flags       Type       State         I-Node   路径\nunix  2      [ ACC ]     流        LISTENING     1010159  /tmp/.java_pid169241.tmp\n</code></pre>\n<p>字段解析：</p>\n<ul>\n<li>Proto：协议名，如tcp、udp、unix等</li>\n<li>Recv-Q：接收队列，即收到的但未处理的数据包数</li>\n<li>Send-Q：发送队列，即发送但未确认的数据包数</li>\n<li>Local Address：本地地址</li>\n<li>Foreign Address：远程地址</li>\n<li>State：套接字状态，如LISTEN、ESTABLISHED等</li>\n<li>I-Node：套接字inode号</li>\n<li>路径：unix域套接字路径</li>\n<li>RefCnt：引用计数</li>\n<li>Flags：套接字标志，如S表示套接字是被动打开的，即服务器端，而A表示套接字是主动打开的，即客户端</li>\n<li>Type：套接字类型，如流套接字、数据报套接字等</li>\n<li>路径：unix域套接字路径</li>\n</ul>\n<h4 id=\"查看路由表\"><a href=\"#查看路由表\" class=\"headerlink\" title=\"查看路由表\"></a>查看路由表</h4><pre class=\" language-sh\"><code class=\"language-sh\">netstat -r\n</code></pre>\n<pre class=\" language-sh\"><code class=\"language-sh\">内核 IP 路由表\nDestination     Gateway         Genmask         Flags   MSS Window  irtt Iface\ndefault         172.16.0.1      0.0.0.0         UG        0 0          0 eno1\none.one.one.one 0.0.0.0         255.255.255.255 UH        0 0          0 utun\n10.10.0.0       0.0.0.0         255.255.0.0     U         0 0          0 utun\n10.40.0.0       0.0.0.0         255.255.0.0     U         0 0          0 utun\n10.100.100.0    0.0.0.0         255.255.255.0   U         0 0          0 utun\n30.100.0.0      0.0.0.0         255.252.0.0     U         0 0          0 utun\nfeilian.hellota 172.16.0.1      255.255.255.255 UGH       0 0          0 eno1\nlink-local      0.0.0.0         255.255.0.0     U         0 0          0 utun\n172.16.0.0      0.0.0.0         255.255.254.0   U         0 0          0 eno1\n172.16.6.20     172.16.0.1      255.255.255.255 UGH       0 0          0 eno1\n172.17.0.0      0.0.0.0         255.255.0.0     U         0 0          0 docker0\n192.168.49.0    0.0.0.0         255.255.255.0   U         0 0          0 br-717e070443f8\n192.168.58.0    0.0.0.0         255.255.255.0   U         0 0          0 br-7f56e5476213\n192.168.122.0   0.0.0.0         255.255.255.0   U         0 0          0 virbr0\n</code></pre>\n<p>字段解析：</p>\n<ul>\n<li>Destination：目的网络或目的主机</li>\n<li>Gateway：指定用于转发包的网关。</li>\n<li>Genmask：子网掩码</li>\n<li>Flags：路由标志，如U表示路由是活动的，H表示目的地址是一个主机，G表示使用网关</li>\n<li>MSS：最大分段大小</li>\n<li>Window：TCP窗口大小</li>\n<li>irtt：初始RTT</li>\n<li>Iface：路由接口</li>\n</ul>\n<h4 id=\"只列出监听中的连接\"><a href=\"#只列出监听中的连接\" class=\"headerlink\" title=\"只列出监听中的连接\"></a>只列出监听中的连接</h4><pre class=\" language-sh\"><code class=\"language-sh\">netstat -tnl\n</code></pre>\n<pre class=\" language-sh\"><code class=\"language-sh\">激活Internet连接 (仅服务器)\nProto Recv-Q Send-Q Local Address           Foreign Address         State      \ntcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN     \ntcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN     \ntcp        0      0 127.0.0.1:35600         0.0.0.0:*               LISTEN     \ntcp        0      0 127.0.0.54:53           0.0.0.0:*               LISTEN     \ntcp        0      0 127.0.0.1:31080         0.0.0.0:*               LISTEN     \ntcp        0      0 127.0.0.1:31055         0.0.0.0:*               LISTEN     \ntcp        0      0 127.0.1.1:53            0.0.0.0:*               LISTEN     \ntcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN     \ntcp6       0      0 :::41499                :::*                    LISTEN     \ntcp6       0      0 127.0.0.1:52829         :::*                    LISTEN     \ntcp6       0      0 127.0.0.1:35955         :::*                    LISTEN     \ntcp6       0      0 127.0.0.1:63343         :::*                    LISTEN     \ntcp6       0      0 127.0.0.1:63342         :::*                    LISTEN     \n</code></pre>\n<h4 id=\"获取进程名、进程号以及用户-ID\"><a href=\"#获取进程名、进程号以及用户-ID\" class=\"headerlink\" title=\"获取进程名、进程号以及用户 ID\"></a>获取进程名、进程号以及用户 ID</h4><pre class=\" language-sh\"><code class=\"language-sh\">netstat -tunlp\n</code></pre>\n<pre class=\" language-sh\"><code class=\"language-sh\">Active Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 127.0.1.1:53            0.0.0.0:*               LISTEN      1144/dnsmasq    \ntcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      661/cupsd       \ntcp6       0      0 ::1:631                 :::*                    LISTEN      661/cupsd\n</code></pre>\n<h4 id=\"查看进程的拥有者会更有用。使用-ep-选项可以同时查看进程名和用户名\"><a href=\"#查看进程的拥有者会更有用。使用-ep-选项可以同时查看进程名和用户名\" class=\"headerlink\" title=\"查看进程的拥有者会更有用。使用 -ep 选项可以同时查看进程名和用户名\"></a>查看进程的拥有者会更有用。使用 -ep 选项可以同时查看进程名和用户名</h4><pre class=\" language-sh\"><code class=\"language-sh\">netstat -tunlep\n</code></pre>\n<pre class=\" language-sh\"><code class=\"language-sh\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       User       Inode      PID/Program name    \ntcp        0      0 192.168.122.1:domain    0.0.0.0:*               LISTEN      root       14887      1567/dnsmasq        \ntcp        0      0 localhost:ipp           0.0.0.0:*               LISTEN      root       1946474    310640/cupsd     \n</code></pre>\n<p>参考：<br><a href=\"https://docs.oracle.com/cd/E26926_01/html/E25874/ipconfig-142.html\">https://docs.oracle.com/cd/E26926_01/html/E25874/ipconfig-142.html</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "Linux",
                "Network",
                "Linux",
                "Network"
            ]
        },
        {
            "id": "https://costalong.com/2024/07/01/linux/awk/",
            "url": "https://costalong.com/2024/07/01/linux/awk/",
            "title": "awk 常用的命令",
            "date_published": "2024-07-01T08:14:42.000Z",
            "content_html": "<h2 id=\"处理字符串\"><a href=\"#处理字符串\" class=\"headerlink\" title=\"处理字符串\"></a>处理字符串</h2><p><strong>提取字符串第三字符串</strong></p>\n<pre class=\" language-sh\"><code class=\"language-sh\">echo 'this is a test' |awk '{print $3}'\n</code></pre>\n<p><strong>替换 字符串中一个</strong></p>\n<pre class=\" language-sh\"><code class=\"language-sh\"> echo \"Hello Tom\" | awk '{$2=\"Adam\"; print $0}'\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">Hello Adam\n</code></pre>\n<h3 id=\"利用变量-菜鸟\"><a href=\"#利用变量-菜鸟\" class=\"headerlink\" title=\"利用变量    菜鸟\"></a>利用变量    <a href=\"https://www.runoob.com/w3cnote/8-awesome-awk-built-in-variables.html\">菜鸟</a></h3><ol>\n<li><p>$NF  表示当前行有多少个字段，</p>\n<p>因此<code>$NF</code>就代表最后一个字段。</p>\n</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">echo 'this is a test' | awk '{print $NF}'\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">test\n</code></pre>\n<p>​     <code>$(NF-1)</code>代表倒数第二个字段</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">echo 'this is a test' | awk '{print $(NF-1)}'\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">a\n</code></pre>\n<p>   2 .变量<code>NR</code>表示当前处理的是第几行。</p>\n<h2 id=\"处理文件\"><a href=\"#处理文件\" class=\"headerlink\" title=\"处理文件\"></a>处理文件</h2><p>处理文件 logs.txt , 文件内容:</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184 [28/Sep/2010:04:08:20] \"GET /robots.txt HTTP/1.1\" 200 0 \"msnbot\"\n123.125.71.19 [28/Sep/2010:04:20:11] \"GET / HTTP/1.1\" 304 - \"Baiduspider\"\n</code></pre>\n<p> <strong>获取第一列数据</strong></p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk '{print $1}' logs.txt\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184\n123.125.71.19\n</code></pre>\n<p><strong>这个文件的字段分隔符是冒号（<code>:</code>），所以要用<code>-F</code>参数指定分隔符为冒号。然后，才能提取到它的第一个字段。</strong></p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk -F ':' '{print $1}' logs.txt\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184 [28/Sep/2010\n123.125.71.19 [28/Sep/2010\n</code></pre>\n<p><strong>提取log 的时间</strong></p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk '{print $2}' logs.txt | awk 'BEGIN{FS=\":\"}{print $1}' | sed 's/\\[//'\n</code></pre>\n<p>输出:</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">28/Sep/2010\n28/Sep/2010\n</code></pre>\n<p>**统计某一个字段的相加 ** </p>\n<p>每次都大于结果</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk '{a+=$(NF-2); print \"Total so far:\", a}' logs.txt\n</code></pre>\n<pre class=\" language-sh\"><code class=\"language-sh\">Total so far: 200\nTotal so far: 504\n</code></pre>\n<p>执行完后在打印结果</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk '{a+=$(NF-2)}END{print \"Total:\", a}' logs.txt\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">Total: 504\n</code></pre>\n<h3 id=\"利用变量\"><a href=\"#利用变量\" class=\"headerlink\" title=\"利用变量\"></a>利用变量</h3><ol>\n<li><strong>OFS: 输出字段分隔符变量</strong></li>\n</ol>\n<p><strong>OFS</strong>(Output Field Separator) 相当与输出上的 <strong>FS</strong>, 默认是以一个空格字符作为输出分隔符的，下面是一个 <strong>OFS</strong> 的例子:</p>\n<p>正常空格命令：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk  '{print $1, $3;}' logs.txt\n</code></pre>\n<p>输出结果：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184 \"GET\n123.125.71.19 \"GET\n</code></pre>\n<p>注意命令中的 print 语句的, 表示的使用一个空格连接两个参数，也就是默认的OFS的值。因此 <strong>OFS</strong> 可以像下面那样插入到输出的字段之间:</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk 'BEGIN{OFS=\"=>\";}{print $1, $3;}' logs.txt\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184=>\"GET\n123.125.71.19=>\"GET\n</code></pre>\n<p>注意： GET 前面多一个双引号，我们需要去掉</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk  '{print $1, $3;}' logs.txt |sed 's/\\\"//'\n\nawk 'BEGIN{OFS=\"=>\";}{print $1, $3;}' logs.txt |sed 's/\\\"//'\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184 GET\n123.125.71.19 GET\n\n07.46.199.184=>GET\n123.125.71.19=>GET\n</code></pre>\n<ol start=\"2\">\n<li><strong>变量<code>NR</code>表示当前处理的是第几行。</strong></li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk '{print NR\") \"$1}' logs.txt\n</code></pre>\n<p>输出:</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">1) 07.46.199.184\n2) 123.125.71.19\n</code></pre>\n<ol start=\"3\">\n<li><p>变量 NF  表示一列的最后一个字段 </p>\n<p>$(NF-2) 表示倒数第三个字段    </p>\n<p>利用 if 判断倒数第三个字段 是否 等于  200</p>\n<pre class=\" language-sh\"><code class=\"language-sh\"> awk '条件 动作' 文件名\n</code></pre>\n</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk '{if ($(NF-2) == \"200\") {print $0}}' logs.txt\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184 [28/Sep/2010:04:08:20] \"GET /robots.txt HTTP/1.1\" 200 0 \"msnbot\"\n</code></pre>\n<h2 id=\"处理进程\"><a href=\"#处理进程\" class=\"headerlink\" title=\"处理进程\"></a>处理进程</h2><ol>\n<li>根据 lsof 命令获取进程 PID</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">lsof -i:3100|awk 'NR>1' |awk '{print $2}' \n</code></pre>\n<p>  kill  -9 进程</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">lsof -i:3100|awk 'NR>1' |awk '{print $2}'  | xargs kill -9\n</code></pre>\n<p>NR  大于  1 表示从第二行开始</p>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">2299757\n2299757\n2299757\n2299757\n2299757\n2299757\n2299757\n2299757\n2299757\n2410946\n</code></pre>\n<h2 id=\"统计文件中的数量\"><a href=\"#统计文件中的数量\" class=\"headerlink\" title=\"统计文件中的数量\"></a>统计文件中的数量</h2><p>查询 file 文件中 haha 的数量</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk -v RS='haha' 'END {print --NR}' file  \n</code></pre>\n<p>或者使用 grep </p>\n<pre class=\" language-sh\"><code class=\"language-sh\">grep -o 'haha' file | wc -l\n</code></pre>\n<h2 id=\"查询使用端口\"><a href=\"#查询使用端口\" class=\"headerlink\" title=\"查询使用端口\"></a>查询使用端口</h2><pre class=\" language-bash\"><code class=\"language-bash\">ss -nutlp <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print <span class=\"token variable\">$1</span>,<span class=\"token variable\">$5</span>}'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F<span class=\"token string\">\"[: ]\"</span> <span class=\"token string\">'{print \"协议:\"<span class=\"token variable\">$1</span>, \"端口号:\"<span class=\"token variable\">$NF</span>}'</span><span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token string\">\"[0-9]\"</span><span class=\"token operator\">|</span><span class=\"token function\">uniq</span>\n</code></pre>\n<h2 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h2><p><a href=\"https://gregable.com/2010/09/why-you-should-know-just-little-awk.html\">Awk Example</a></p>\n<p><a href=\"https://www.runoob.com/linux/linux-comm-awk.html\">菜鸟</a></p>\n<p><a href=\"https://www.ruanyifeng.com/blog/2018/11/awk.html\">awk 入门教程</a></p>\n<p><a href=\"https://likegeeks.com/awk-command/\">30 Examples for Awk Command in Text Processing</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/34946663\">查找grep、提取awk、sed、重定向</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "linux",
                "awk"
            ]
        },
        {
            "id": "https://costalong.com/2024/07/01/linux/tcpdump/",
            "url": "https://costalong.com/2024/07/01/linux/tcpdump/",
            "title": "tcpdump 常用命令",
            "date_published": "2024-07-01T08:14:42.000Z",
            "content_html": "<p>tcpdump 支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息</p>\n<h2 id=\"命令格式：\"><a href=\"#命令格式：\" class=\"headerlink\" title=\"命令格式：\"></a>命令格式：</h2><pre class=\" language-sh\"><code class=\"language-sh\">tcpdump [ -DenNqvX ] [ -c count ] [ -F file ] [ -i interface ] [ -r file ]\n        [ -s snaplen ] [ -w file ] [ expression ]\n</code></pre>\n<p>抓包选项：<br>-c：指定要抓取的包数量。</p>\n<p>-i interface：指定tcpdump需要监听的接口。默认会抓取第一个网络接口</p>\n<p>-n：对地址以数字方式显式，否则显式为主机名，也就是说-n选项不做主机名解析。</p>\n<p>-nn：除了-n的作用外，还把端口显示为数值，否则显示端口服务名。</p>\n<p>-P：指定要抓取的包是流入还是流出的包。可以给定的值为”in”、”out”和”inout”，默认为”inout”。</p>\n<p>-s len：设置tcpdump的数据包抓取长度为len，如果不设置默认将会是65535字节。对于要抓取的数据包较大时，长度设置不够可能会产生包截断，若出现包截断，<br>：输出行中会出现”[|proto]”的标志(proto实际会显示为协议名)。但是抓取len越长，包的处理时间越长，并且会减少tcpdump可缓存的数据包的数量，<br>：从而会导致数据包的丢失，所以在能抓取我们想要的包的前提下，抓取长度越小越好。</p>\n<p>输出选项：<br>-e：输出的每行中都将包括数据链路层头部信息，例如源MAC和目标MAC。</p>\n<p>-q：快速打印输出。即打印很少的协议相关信息，从而输出行都比较简短。</p>\n<p>-X：输出包的头部数据，会以16进制和ASCII两种方式同时输出。</p>\n<p>-XX：输出包的头部数据，会以16进制和ASCII两种方式同时输出，更详细。</p>\n<p>-v：当分析和打印的时候，产生详细的输出。</p>\n<p>-vv：产生比-v更详细的输出。<br>-vvv：产生比-vv更详细的输出。</p>\n<h2 id=\"tcpdump示例\"><a href=\"#tcpdump示例\" class=\"headerlink\" title=\"tcpdump示例\"></a>tcpdump示例</h2><p>==**tcpdump只能抓取流经本机的数据包 **==</p>\n<ol>\n<li>默认启动</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump\n</code></pre>\n<p>默认情况下，直接启动tcpdump将监视第一个网络接口(非lo口)上所有流通的数据包。这样抓取的结果会非常多，滚动非常快。</p>\n<p>2 . 监视指定网络接口的数据包</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump -i ens33\n</code></pre>\n<ol start=\"3\">\n<li>监视指定主机的数据包，例如所有进入或离开node1的数据包</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump -i ens33  host node1\n</code></pre>\n<ol start=\"4\">\n<li>打印node1&lt;–&gt;node2或node1&lt;–&gt;node3之间通信的数据包</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump -i ens33 host node1 and \\(node2 or node3\\)\n</code></pre>\n<ol start=\"5\">\n<li>打印node1与任何其他主机之间通信的IP数据包,但不包括与node4之间的数据包</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump -i ens33 host node1 and not node4\n</code></pre>\n<ol start=\"6\">\n<li>截获主机node1 发送的所有数据</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump -i ens33 src host node1\n</code></pre>\n<ol start=\"7\">\n<li>监视所有发送到主机node1 的数据包</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump -i ens33 dst host node1\n</code></pre>\n<ol start=\"8\">\n<li>监视指定主机和端口的数据包</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump -i ens33 port 8080 and host node1\n</code></pre>\n<ol start=\"9\">\n<li>监视指定网络的数据包，如本机与192.168网段通信的数据包，”-c 10”表示只抓取10个包</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump -i ens33 -c 10 net 192.168\n</code></pre>\n<ol start=\"10\">\n<li>打印所有通过网关snup的ftp数据包</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump 'gateway snup and (port ftp or ftp-data)'\n</code></pre>\n<p>注意,表达式被单引号括起来了,这可以防止shell对其中的括号进行错误解析</p>\n<ol start=\"11\">\n<li>抓取ping包</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump -c 5 -nn -i ens33 \n</code></pre>\n<p>==指定主机抓ping包==</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump -c 5 -nn -i eth0 icmp and src 192.168.100.62\n</code></pre>\n<ol start=\"12\">\n<li>抓取到本机22端口包</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump -c 10 -nn -i ens33 tcp dst port 22\n</code></pre>\n<ol start=\"13\">\n<li>解析包数据</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">tcpdump -c 2 -q -XX -vvv -nn -i ens33 tcp dst port 22\n</code></pre>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "linux",
                "tcpdump"
            ]
        },
        {
            "id": "https://costalong.com/2024/07/01/linux/date/",
            "url": "https://costalong.com/2024/07/01/linux/date/",
            "title": "linux date 命令",
            "date_published": "2024-07-01T07:14:42.000Z",
            "content_html": "<h2 id=\"date-命令参数说明\"><a href=\"#date-命令参数说明\" class=\"headerlink\" title=\"date 命令参数说明\"></a>date 命令参数说明</h2><!-- 转换表格 -->\n\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%%</td>\n<td>一个文字的 %</td>\n</tr>\n<tr>\n<td>%a</td>\n<td>当前locale 的星期名缩写(例如： 日，代表星期日)</td>\n</tr>\n<tr>\n<td>%A</td>\n<td>当前locale 的星期名全称 (如：星期日)</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>当前locale 的月名缩写 (如：一，代表一月)</td>\n</tr>\n<tr>\n<td>%B</td>\n<td>当前locale 的月名全称 (如：一月)</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>当前locale 的日期和时间 (如：2005年3月3日 星期四 23:05:25)</td>\n</tr>\n<tr>\n<td>%C</td>\n<td>世纪；比如 %Y，通常为省略当前年份的后两位数字(例如：20)</td>\n</tr>\n<tr>\n<td>%Y</td>\n<td>年</td>\n</tr>\n<tr>\n<td>%y</td>\n<td>年份后两位  (00..99)</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>月</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>日</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>按月计的日期；等于%m/%d/%y</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>按月计的日期，添加空格，等于%_d</td>\n</tr>\n<tr>\n<td>%F</td>\n<td>完整日期格式，等价于 %Y-%m-%d</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>小时 24 小时制  hour (00..23)</td>\n</tr>\n<tr>\n<td>%I</td>\n<td>小时 12 小时制   hour (01..12)</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>分钟</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>秒钟</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>当前时间秒数</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>时钟 等于 %H:%M:%S</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>本地时间和日期</td>\n</tr>\n<tr>\n<td>%j</td>\n<td>一年中的第几天</td>\n</tr>\n<tr>\n<td>%W</td>\n<td>一年中的第几周 星期一为一周的第一天</td>\n</tr>\n<tr>\n<td>%w</td>\n<td>星期几  week(0..6) ; 0 是星期天</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>星期几  week(1..7) ; 1 是星期一</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>一年中的第几周  星期日为一周的第一天</td>\n</tr>\n<tr>\n<td>%V</td>\n<td>ISO 周数  星期一为一周的第一天, ISO 周编号</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>日期   (e.g., 12/31/99)</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>时间  (e.g., 23:13:48)</td>\n</tr>\n<tr>\n<td>%z</td>\n<td>时区  数字格式  (e.g., +0800)</td>\n</tr>\n<tr>\n<td>%:z</td>\n<td>时区 +08:00</td>\n</tr>\n<tr>\n<td>%::z</td>\n<td>时区 +08:00:00</td>\n</tr>\n<tr>\n<td>%:::z</td>\n<td>时区 +08</td>\n</tr>\n<tr>\n<td>%Z</td>\n<td>时区缩写  CST</td>\n</tr>\n<tr>\n<td>%n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>%N</td>\n<td>纳秒(000000000-999999999)</td>\n</tr>\n</tbody></table>\n<h2 id=\"时间戳与时间互转\"><a href=\"#时间戳与时间互转\" class=\"headerlink\" title=\"时间戳与时间互转\"></a>时间戳与时间互转</h2><ol>\n<li>时间戳转换成时间格式</li>\n</ol>\n<pre class=\" language-Bash\"><code class=\"language-Bash\">date -d @1718866413  \"+%Y-%m-%d %H:%M:%S\"\n=> 2024-06-20 14:53:33\n</code></pre>\n<ol>\n<li>获取当前时间戳</li>\n</ol>\n<pre class=\" language-Bash\"><code class=\"language-Bash\"> date +%s\n => 1718869999\n</code></pre>\n<ol>\n<li>获取当天的时钟</li>\n</ol>\n<pre class=\" language-Bash\"><code class=\"language-Bash\">date +%T  \n=> 15:54:22\n</code></pre>\n<ol>\n<li>获取某个时间节点对应的时间戳</li>\n</ol>\n<pre class=\" language-Bash\"><code class=\"language-Bash\">date -d \"2021-12-20\"  +%s\n=> 1639929600\n\ndate -d \"2021-12-20 20:20:10\"  +%s\n=> 1640002810\n</code></pre>\n<ol>\n<li>获取当前时间或指定时间是全年的第几天</li>\n</ol>\n<pre class=\" language-Bash\"><code class=\"language-Bash\"># 当前时间\ndate  +%j\n=> 172 \n# 指定时间\ndate -d \"2021-12-20 20:20:10\"  +%j\n=> 354\n</code></pre>\n<ol start=\"2\">\n<li>当前时间是第几周</li>\n</ol>\n<pre class=\" language-Bash\"><code class=\"language-Bash\">date +%W\n=> 25\n</code></pre>\n<ol>\n<li>查看当前时间日前与时间</li>\n</ol>\n<pre class=\" language-Bash\"><code class=\"language-Bash\"># \ndate  \"+%x %X\"\n=> 06/20/2024 04:09:04 PM\n</code></pre>\n<ol>\n<li>查看当前时区</li>\n</ol>\n<pre class=\" language-Bash\"><code class=\"language-Bash\">date +%z\n=> +0800\n</code></pre>\n<ol>\n<li>设置时区获取时间</li>\n</ol>\n<pre class=\" language-Bash\"><code class=\"language-Bash\"># 当前时间戳转换\nTZ='America/Los_Angeles' date \"+%Y-%m-%d %H:%M:%S\"\n=> 2024-06-20 01:22:26\n\nTZ=\"Asia/Shanghai\" date \"+%Y-%m-%d %H:%M:%S\"\n=> 2024-06-20 16:26:38\n\n# 指定时间戳转换\nTZ='America/Los_Angeles'  date -d @1718866413 \"+%Y-%m-%d %H:%M:%S\"\n=> 2024-06-19 23:53:33\n\nTZ=\"Asia/Shanghai\" date -d @1718866413 \"+%Y-%m-%d %H:%M:%S\"\n=> 2024-06-20 14:53:33\n</code></pre>\n<p>参考时区表 <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</a></p>\n<p>通过 <code>timedatectl list-timezones</code> 列出可用的时区</p>\n<pre class=\" language-Bash\"><code class=\"language-Bash\">timedatectl list-timezones\n\n=>Africa/Abidjan\nAfrica/Accra\nAfrica/Addis_Ababa\nAfrica/Algiers\nAfrica/Asmara\nAfrica/Asmera\nAfrica/Bamako\nAfrica/Bangui\nAfrica/Banjul\nAfrica/Bissau\nAfrica/Blantyre\n...\n</code></pre>\n<h2 id=\"设置系统日期和时间\"><a href=\"#设置系统日期和时间\" class=\"headerlink\" title=\"设置系统日期和时间\"></a>设置系统日期和时间</h2><pre class=\" language-Bash\"><code class=\"language-Bash\"> date –set=\"20140125 09:17:00\"\n</code></pre>\n<p>通过 <code>man date</code>  查看 date 更多参数</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "linux",
                "date"
            ]
        }
    ]
}