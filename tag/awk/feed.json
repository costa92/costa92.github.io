{
    "version": "https://jsonfeed.org/version/1",
    "title": "翼舞成梦",
    "subtitle": "翼舞成梦",
    "icon": "https://costalong.com/images/favicon.ico",
    "description": "",
    "home_page_url": "https://costalong.com",
    "items": [
        {
            "id": "https://costalong.com/2024/07/01/linux/awk/",
            "url": "https://costalong.com/2024/07/01/linux/awk/",
            "title": "awk 常用的命令",
            "date_published": "2024-07-01T08:14:42.000Z",
            "content_html": "<h2 id=\"处理字符串\"><a href=\"#处理字符串\" class=\"headerlink\" title=\"处理字符串\"></a>处理字符串</h2><p><strong>提取字符串第三字符串</strong></p>\n<pre class=\" language-sh\"><code class=\"language-sh\">echo 'this is a test' |awk '{print $3}'\n</code></pre>\n<p><strong>替换 字符串中一个</strong></p>\n<pre class=\" language-sh\"><code class=\"language-sh\"> echo \"Hello Tom\" | awk '{$2=\"Adam\"; print $0}'\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">Hello Adam\n</code></pre>\n<h3 id=\"利用变量-菜鸟\"><a href=\"#利用变量-菜鸟\" class=\"headerlink\" title=\"利用变量    菜鸟\"></a>利用变量    <a href=\"https://www.runoob.com/w3cnote/8-awesome-awk-built-in-variables.html\">菜鸟</a></h3><ol>\n<li><p>$NF  表示当前行有多少个字段，</p>\n<p>因此<code>$NF</code>就代表最后一个字段。</p>\n</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">echo 'this is a test' | awk '{print $NF}'\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">test\n</code></pre>\n<p>​     <code>$(NF-1)</code>代表倒数第二个字段</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">echo 'this is a test' | awk '{print $(NF-1)}'\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">a\n</code></pre>\n<p>   2 .变量<code>NR</code>表示当前处理的是第几行。</p>\n<h2 id=\"处理文件\"><a href=\"#处理文件\" class=\"headerlink\" title=\"处理文件\"></a>处理文件</h2><p>处理文件 logs.txt , 文件内容:</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184 [28/Sep/2010:04:08:20] \"GET /robots.txt HTTP/1.1\" 200 0 \"msnbot\"\n123.125.71.19 [28/Sep/2010:04:20:11] \"GET / HTTP/1.1\" 304 - \"Baiduspider\"\n</code></pre>\n<p> <strong>获取第一列数据</strong></p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk '{print $1}' logs.txt\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184\n123.125.71.19\n</code></pre>\n<p><strong>这个文件的字段分隔符是冒号（<code>:</code>），所以要用<code>-F</code>参数指定分隔符为冒号。然后，才能提取到它的第一个字段。</strong></p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk -F ':' '{print $1}' logs.txt\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184 [28/Sep/2010\n123.125.71.19 [28/Sep/2010\n</code></pre>\n<p><strong>提取log 的时间</strong></p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk '{print $2}' logs.txt | awk 'BEGIN{FS=\":\"}{print $1}' | sed 's/\\[//'\n</code></pre>\n<p>输出:</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">28/Sep/2010\n28/Sep/2010\n</code></pre>\n<p>**统计某一个字段的相加 ** </p>\n<p>每次都大于结果</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk '{a+=$(NF-2); print \"Total so far:\", a}' logs.txt\n</code></pre>\n<pre class=\" language-sh\"><code class=\"language-sh\">Total so far: 200\nTotal so far: 504\n</code></pre>\n<p>执行完后在打印结果</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk '{a+=$(NF-2)}END{print \"Total:\", a}' logs.txt\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">Total: 504\n</code></pre>\n<h3 id=\"利用变量\"><a href=\"#利用变量\" class=\"headerlink\" title=\"利用变量\"></a>利用变量</h3><ol>\n<li><strong>OFS: 输出字段分隔符变量</strong></li>\n</ol>\n<p><strong>OFS</strong>(Output Field Separator) 相当与输出上的 <strong>FS</strong>, 默认是以一个空格字符作为输出分隔符的，下面是一个 <strong>OFS</strong> 的例子:</p>\n<p>正常空格命令：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk  '{print $1, $3;}' logs.txt\n</code></pre>\n<p>输出结果：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184 \"GET\n123.125.71.19 \"GET\n</code></pre>\n<p>注意命令中的 print 语句的, 表示的使用一个空格连接两个参数，也就是默认的OFS的值。因此 <strong>OFS</strong> 可以像下面那样插入到输出的字段之间:</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk 'BEGIN{OFS=\"=>\";}{print $1, $3;}' logs.txt\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184=>\"GET\n123.125.71.19=>\"GET\n</code></pre>\n<p>注意： GET 前面多一个双引号，我们需要去掉</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk  '{print $1, $3;}' logs.txt |sed 's/\\\"//'\n\nawk 'BEGIN{OFS=\"=>\";}{print $1, $3;}' logs.txt |sed 's/\\\"//'\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184 GET\n123.125.71.19 GET\n\n07.46.199.184=>GET\n123.125.71.19=>GET\n</code></pre>\n<ol start=\"2\">\n<li><strong>变量<code>NR</code>表示当前处理的是第几行。</strong></li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk '{print NR\") \"$1}' logs.txt\n</code></pre>\n<p>输出:</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">1) 07.46.199.184\n2) 123.125.71.19\n</code></pre>\n<ol start=\"3\">\n<li><p>变量 NF  表示一列的最后一个字段 </p>\n<p>$(NF-2) 表示倒数第三个字段    </p>\n<p>利用 if 判断倒数第三个字段 是否 等于  200</p>\n<pre class=\" language-sh\"><code class=\"language-sh\"> awk '条件 动作' 文件名\n</code></pre>\n</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk '{if ($(NF-2) == \"200\") {print $0}}' logs.txt\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">07.46.199.184 [28/Sep/2010:04:08:20] \"GET /robots.txt HTTP/1.1\" 200 0 \"msnbot\"\n</code></pre>\n<h2 id=\"处理进程\"><a href=\"#处理进程\" class=\"headerlink\" title=\"处理进程\"></a>处理进程</h2><ol>\n<li>根据 lsof 命令获取进程 PID</li>\n</ol>\n<pre class=\" language-sh\"><code class=\"language-sh\">lsof -i:3100|awk 'NR>1' |awk '{print $2}' \n</code></pre>\n<p>  kill  -9 进程</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">lsof -i:3100|awk 'NR>1' |awk '{print $2}'  | xargs kill -9\n</code></pre>\n<p>NR  大于  1 表示从第二行开始</p>\n<p>输出：</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">2299757\n2299757\n2299757\n2299757\n2299757\n2299757\n2299757\n2299757\n2299757\n2410946\n</code></pre>\n<h2 id=\"统计文件中的数量\"><a href=\"#统计文件中的数量\" class=\"headerlink\" title=\"统计文件中的数量\"></a>统计文件中的数量</h2><p>查询 file 文件中 haha 的数量</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">awk -v RS='haha' 'END {print --NR}' file  \n</code></pre>\n<p>或者使用 grep </p>\n<pre class=\" language-sh\"><code class=\"language-sh\">grep -o 'haha' file | wc -l\n</code></pre>\n<h2 id=\"查询使用端口\"><a href=\"#查询使用端口\" class=\"headerlink\" title=\"查询使用端口\"></a>查询使用端口</h2><pre class=\" language-bash\"><code class=\"language-bash\">ss -nutlp <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print <span class=\"token variable\">$1</span>,<span class=\"token variable\">$5</span>}'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F<span class=\"token string\">\"[: ]\"</span> <span class=\"token string\">'{print \"协议:\"<span class=\"token variable\">$1</span>, \"端口号:\"<span class=\"token variable\">$NF</span>}'</span><span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token string\">\"[0-9]\"</span><span class=\"token operator\">|</span><span class=\"token function\">uniq</span>\n</code></pre>\n<h2 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h2><p><a href=\"https://gregable.com/2010/09/why-you-should-know-just-little-awk.html\">Awk Example</a></p>\n<p><a href=\"https://www.runoob.com/linux/linux-comm-awk.html\">菜鸟</a></p>\n<p><a href=\"https://www.ruanyifeng.com/blog/2018/11/awk.html\">awk 入门教程</a></p>\n<p><a href=\"https://likegeeks.com/awk-command/\">30 Examples for Awk Command in Text Processing</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/34946663\">查找grep、提取awk、sed、重定向</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "linux",
                "awk"
            ]
        }
    ]
}